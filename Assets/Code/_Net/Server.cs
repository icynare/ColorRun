// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from Server.proto</summary>
  public static partial class ServerReflection {

    #region Descriptor
    /// <summary>File descriptor for Server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTZXJ2ZXIucHJvdG8ikQQKCVNSb29tSXRlbRIPCgdpc19mYWlsGAEgASgF",
            "EgoKAmlkGAIgASgFEg8KB2ltZ191cmwYAyABKAkSDAoEbmFtZRgEIAEoCRIS",
            "CgpzdGFydF90aW1lGAUgASgDEhAKCGVuZF90aW1lGAYgASgDEhIKCmRlbGF5",
            "X3RpbWUYByABKAMSEQoJam9pbl9jb3N0GAggASgFEhQKDHNlcnZpY2VfY29z",
            "dBgJIAEoBRISCgppbml0X3Njb3JlGAogASgFEhUKDXNpZ25fdXBfY291bnQY",
            "CyABKAUSGgoSc2luZ2xlX3RhYmxlX2NvdW50GAwgASgFEhwKFG1heF9yZXB1",
            "cmNoYXNlX3RpbWVzGA0gASgFEhwKFHJlcHVyY2hhc2VfZ29sZF9iZWFuGA4g",
            "ASgFEh8KF3JlcHVyY2hhc2VfcmVjb3JkX3Bva2VyGA8gASgFEhcKD3JhaXNl",
            "X2dvbGRfYmVhbhgQIAEoBRIaChJyYWlzZV9yZWNvcmRfcG9rZXIYESABKAUS",
            "KAoKcm9vbV9zdGF0ZRgSIAEoDjIULlNSb29tSXRlbS5Sb29tU3RhdGUSEwoL",
            "c21hbGxfYmxpbmQYEyABKAUSEQoJYmlnX2JsaW5kGBQgASgFIjoKCVJvb21T",
            "dGF0ZRINCgljYW5TaWduVXAQABIPCgtkZWxheVNpZ25VcBABEg0KCW9ubG9v",
            "a2VycxACIo8BCglTUGFnZUluZm8SDQoFZmlyc3QYASABKAgSDAoEbGFzdBgC",
            "IAEoCBIOCgZudW1iZXIYAyABKAUSGgoSbnVtYmVyX29mX2VsZW1lbnRzGAQg",
            "ASgFEgwKBHNpemUYBSABKAUSFgoOdG90YWxfZWxlbWVudHMYBiABKAUSEwoL",
            "dG90YWxfcGFnZXMYByABKAUiogEKD1NSb29tUmV3YXJkTGlzdBIPCgdpc19m",
            "YWlsGAEgASgFEjIKDHJvb21fcmV3YXJkcxgCIAMoCzIcLlNSb29tUmV3YXJk",
            "TGlzdC5TUm9vbVJld2FyZBIdCglwYWdlX2luZm8YAyABKAsyCi5TUGFnZUlu",
            "Zm8aKwoLU1Jvb21SZXdhcmQSDAoEcmFuaxgBIAEoCRIOCgZyZXdhcmQYAiAB",
            "KAki9gEKEFNSb29tSW5zdHJ1Y3Rpb24SDwoHaXNfZmFpbBgBIAEoBRISCgpz",
            "dGFydF90aW1lGAIgASgDEhgKEHJlbWFpbmRpbmdfY291bnQYAyABKAUSFwoP",
            "Y3VycmVudF9yYW5raW5nGAQgASgFEhEKCWF2Z19zY29yZRgFIAEoBRITCgti",
            "bGluZF9sZXZlbBgGIAEoBRIVCg1jdXJyZW50X2JsaW5kGAcgASgFEgwKBGFu",
            "dGUYCCABKAUSHgoKdXNlcl9pdGVtcxgJIAMoCzIKLlNVc2VySXRlbRIdCglw",
            "YWdlX2luZm8YCiABKAsyCi5TUGFnZUluZm8iUAoJU1VzZXJJdGVtEg8KB3Vz",
            "ZXJfaWQYASABKAUSEQoJdXNlcl9uYW1lGAIgASgFEg0KBXNjb3JlGAMgASgF",
            "EhAKCGludGVncmFsGAQgASgFIroBCg9TUm9vbVBva2VyVGFibGUSDwoHaXNf",
            "ZmFpbBgBIAEoBRI7ChFwb2tlcl90YWJsZV9pdGVtcxgCIAMoCzIgLlNSb29t",
            "UG9rZXJUYWJsZS5TUG9rZXJUYWJsZUl0ZW0SHQoJcGFnZV9pbmZvGAMgASgL",
            "MgouU1BhZ2VJbmZvGjoKD1NQb2tlclRhYmxlSXRlbRIRCgl0YWJsZV9udW0Y",
            "ASABKAUSFAoMcGxheWVyX2NvdW50GAIgASgFInQKC1NSb29tUGxheWVyEg8K",
            "B2lzX2ZhaWwYASABKAUSFQoNcGxheWRlcl9jb3VudBgCIAEoBRIeCgp1c2Vy",
            "X2l0ZW1zGAMgAygLMgouU1VzZXJJdGVtEh0KCXBhZ2VfaW5mbxgEIAEoCzIK",
            "LlNQYWdlSW5mbyLNAQoKU1Jvb21CbGluZBIPCgdpc19mYWlsGAEgASgFEhUK",
            "DXBsYXlkZXJfY291bnQYAiABKAUSKwoLYmxpbmRfaXRlbXMYAyADKAsyFi5T",
            "Um9vbUJsaW5kLlNCbGluZEl0ZW0SHQoJcGFnZV9pbmZvGAQgASgLMgouU1Bh",
            "Z2VJbmZvGksKClNCbGluZEl0ZW0SDQoFbGV2ZWwYASABKAkSDQoFYmxpbmQY",
            "AiABKAUSDAoEZ290bxgDIAEoBRIRCglyaXNlX3RpbWUYBCABKAUi5AEKDlNV",
            "c2VyU2NvcmVMaXN0Eg8KB2lzX2ZhaWwYASABKAUSEwoLcmF0ZV9vZl93aW4Y",
            "AiABKAkSEgoKdG90YWxfcGxheRgDIAEoBRIvCgtzY29yZV9pdGVtcxgEIAMo",
            "CzIaLlNVc2VyU2NvcmVMaXN0LlNTY29yZUl0ZW0SHQoJcGFnZV9pbmZvGAUg",
            "ASgLMgouU1BhZ2VJbmZvGkgKClNTY29yZUl0ZW0SCgoCaWQYASABKAUSDQoF",
            "YmxpbmQYAiABKAkSEQoJcGxheV90aW1lGAMgASgDEgwKBHJhbmsYBCABKAki",
            "5gEKEFNVc2VyU2NvcmVEZXRhaWwSDwoHaXNfZmFpbBgBIAEoBRIKCgJpZBgC",
            "IAEoBRINCgVibGluZBgDIAEoCRISCgpiZWdpbl90aW1lGAQgASgDEhAKCGVu",
            "ZF90aW1lGAUgASgDEjEKC3Njb3JlX2l0ZW1zGAYgAygLMhwuU1VzZXJTY29y",
            "ZURldGFpbC5TU2NvcmVJdGVtGk0KClNTY29yZUl0ZW0SDAoEcmFuaxgBIAEo",
            "BRIOCgZhdmF0YXIYAiABKAkSEQoJdXNlcl9uYW1lGAMgASgJEg4KBnJld2Fy",
            "ZBgEIAEoCSJbCglTUm9vbUxpc3QSDwoHaXNfZmFpbBgBIAEoBRIeCgpyb29t",
            "X2l0ZW1zGAIgAygLMgouU1Jvb21JdGVtEh0KCXBhZ2VfaW5mbxgDIAEoCzIK",
            "LlNQYWdlSW5mbyJpCgpTSm9pblRhYmxlEg8KB2lzX2ZhaWwYASABKAUSEQoJ",
            "cmlzZV90aW1lGAIgASgFEhkKB3BsYXllcnMYBCADKAsyCC5TUGxheWVyEhwK",
            "DHB1YmxpY19jYXJkcxgFIAMoCzIGLlNDYXJkItkBCgdTUGxheWVyEgoKAmlk",
            "GAEgASgFEgwKBHNlYXQYAiABKAUSEQoJbmlja19uYW1lGAMgASgJEg4KBmF2",
            "YXRhchgEIAEoCRISCgp1c2VyX2NoaXBzGAUgASgFEhsKE3RvdGFsX2JldHRp",
            "bmdfY2hpcHMYBiABKAUSGwoTYmV0dGluZ19jeWNsZV9jaGlwcxgHIAEoBRIX",
            "CgZnZW5kZXIYCCABKA4yBy5HZW5kZXISDQoFc3RhdGUYCSABKAUSGwoLaGFu",
            "ZHNfY2FyZHMYCiADKAsyBi5TQ2FyZCInCgVTQ2FyZBIOCgZudW1iZXIYASAB",
            "KAUSDgoGZmxvd2VyGAIgASgFIigKCVNMZWZ0Um9vbRIPCgdpc19mYWlsGAEg",
            "ASgFEgoKAmlkGAIgASgFIpMBCgdTQ2hpcEluEg8KB2lzX2ZhaWwYASABKAUS",
            "DQoFY2hpcHMYAiABKAUSDwoHdXNlcl9pZBgDIAEoBRIbCgR0eXBlGAQgASgO",
            "Mg0uU0NoaXBJbi5UeXBlIjoKBFR5cGUSBwoDQkVUEAASCQoFUkFJU0UQARII",
            "CgRDQUxMEAISCQoFQ0hFQ0sQAxIJCgVBTExJThAEIisKB1NHaXZlVXASDwoH",
            "aXNfZmFpbBgBIAEoBRIPCgd1c2VyX2lkGAIgASgFIkcKC1NSZXB1cmNoYXNl",
            "Eg8KB2lzX2ZhaWwYASABKAUSCgoCaWQYAiABKAUSDAoEc2VhdBgDIAEoBRIN",
            "CgVjb3VudBgEIAEoBSJgCgxTTm90aWNlQmxpbmQSEgoKcmFpc2VfdGltZRgB",
            "IAEoBRITCgtyYWlzZV9sZXZlbBgCIAEoBRINCgVibGluZBgDIAEoBRIYChBw",
            "cmVfcmVjb3JkX3Bva2VyGAQgASgFIh8KBlNDYXJkcxIVCgVjYXJkcxgBIAMo",
            "CzIGLlNDYXJkIiEKDFNXYWl0QWRkVGltZRIRCgl3YWl0X3RpbWUYASABKAUi",
            "LQoHU1Jlc3VsdBIiCgx1c2VyX3Jlc3VsdHMYASADKAsyDC5TVXNlclJlc3Vs",
            "dCI/CgtTVXNlclJlc3VsdBIKCgJpZBgBIAEoBRIVCgVjYXJkcxgCIAMoCzIG",
            "LlNDYXJkEg0KBXNjb3JlGAMgASgFIqYBCgtTVGFibGVTY29yZRI0ChB1c2Vy",
            "X3Njb3JlX2l0ZW1zGAEgAygLMhouU1RhYmxlU2NvcmUuVXNlclNjb3JlSXRl",
            "bRphCg1Vc2VyU2NvcmVJdGVtEgoKAmlkGAEgASgFEgwKBHNlYXQYAiABKAUS",
            "DQoFc2NvcmUYAyABKAUSEAoIY2FyZFR5cGUYBCABKAkSFQoFY2FyZHMYBSAD",
            "KAsyBi5TQ2FyZCI1CgpTT3JkZXJJdGVtEgoKAmlkGAEgASgFEgwKBHNlYXQY",
            "AiABKAUSDQoFb3JkZXIYAyABKAUiHwoOU1NwbGl0TGVmdFNlYXQSDQoFc2Vh",
            "dHMYASADKAUiLAoIU1ZlckNvZGUSDwoHaXNfZmFpbBgBIAEoBRIPCgd2ZXJD",
            "b2RlGAIgASgFIjQKDVNNb2RpZnlBdmF0YXISDwoHaXNfZmFpbBgBIAEoBRIS",
            "CgphdmF0YXJfdXJsGAIgASgFIikKBVNDaGF0Eg8KB2lzX2ZhaWwYASABKAUS",
            "DwoHY29udGVudBgCIAEoBSIYCgVTQ2x1YhIPCgdpc19mYWlsGAEgASgFIlIK",
            "CVNDbHViTGlzdBIPCgdpc19mYWlsGAEgASgFEhUKBWNsdWJzGAIgAygLMgYu",
            "U0NsdWISHQoJcGFnZV9pbmZvGAMgASgLMgouU1BhZ2VJbmZvIpsBChFTU2hv",
            "cHBpbmdNYWxsTGlzdBIPCgdpc19mYWlsGAEgASgFEkEKE3Nob3BwaW5nX21h",
            "bGxfaXRlbXMYAiADKAsyJC5TU2hvcHBpbmdNYWxsTGlzdC5TU2hvcHBpbmdN",
            "YWxsSXRlbRIdCglwYWdlX2luZm8YAyABKAsyCi5TUGFnZUluZm8aEwoRU1No",
            "b3BwaW5nTWFsbEl0ZW0ihgEKDVNLbmFwc2Fja0xpc3QSDwoHaXNfZmFpbBgB",
            "IAEoBRI0Cg5rbmFwc2Fja19pdGVtcxgCIAMoCzIcLlNLbmFwc2Fja0xpc3Qu",
            "U0tuYXBzYWNrSXRlbRIdCglwYWdlX2luZm8YAyABKAsyCi5TUGFnZUluZm8a",
            "DwoNU0tuYXBzYWNrSXRlbSIsCghTQWJvdXRVcxIPCgdpc19mYWlsGAEgASgF",
            "Eg8KB2NvbnRlbnQYAiABKAkipwEKCVNWc2Vyc2lvbhIPCgdpc19mYWlsGAEg",
            "ASgFEhUKDWFuVmVyc2lvbkNvZGUYAiABKAkSFAoMYW5WZXJzaW9uRGVzGAMg",
            "ASgJEhUKDWFuRG93bmxvYWRVcmwYBCABKAkSFgoOaW9zVmVyc2lvbkNvZGUY",
            "BSABKAkSFQoNaW9zVmVyc2lvbkRlcxgGIAEoCRIWCg5pb3NEb3dubG9hZFVy",
            "bBgHIAEoCSIcCglTRmVlZGJhY2sSDwoHaXNfZmFpbBgBIAEoBSKjAQoGU1Rh",
            "YmxlEiEKBXN0YXRlGAEgASgOMhIuU1RhYmxlLlRhYmxlU3RhdGUSDwoHc2Vh",
            "dF9ubxgCIAEoBRIQCghjYXBhY2l0eRgDIAEoBRIXCg9ibGluZF91cF9yZW1h",
            "aW4YBCABKAUSEwoLYnV0dG9uX3NlYXQYBSABKAUiJQoKVGFibGVTdGF0ZRIK",
            "CgZHQU1JTkcQABILCgdXQUlUSU5HEAEiKwoMU1JvdW5kV2lubmVyEgwKBHNl",
            "YXQYASABKAUSDQoFY2hpcHMYAiABKAUiIQoEU1RpcBIMCgRjb2RlGAEgASgF",
            "EgsKA21zZxgCIAEoCSKvAQoFU1VzZXISDwoHaXNfZmFpbBgBIAEoBRIKCgJp",
            "ZBgCIAEoBRISCgphdmF0YXJfdXJsGAMgASgJEg0KBXBob25lGAQgASgJEhAK",
            "CG5pY2tuYW1lGAUgASgJEhcKBmdlbmRlchgGIAEoDjIHLkdlbmRlchINCgVs",
            "ZXZlbBgHIAEoBRINCgVtb25leRgIIAEoBRIOCgZnYW1lSWQYCSABKAUSDQoF",
            "dG9rZW4YCiABKAkiGQoLU1VzZXJBY3Rpb24SCgoCaWQYASABKAQiJwoKU0dh",
            "bWVTdGFydBIZChFzbWFsbF9ibGluZHNfc2VhdBgBIAEoBSorCgZHZW5kZXIS",
            "CAoETUFMRRAAEgoKBkZFTUFMRRABEgsKB1NFQ1JFQ1kQAkIcChRjb20ubHV3",
            "ZWkuZ2FtZS5wcm90b6oCA01zZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Msg.Gender), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomItem), global::Msg.SRoomItem.Parser, new[]{ "IsFail", "Id", "ImgUrl", "Name", "StartTime", "EndTime", "DelayTime", "JoinCost", "ServiceCost", "InitScore", "SignUpCount", "SingleTableCount", "MaxRepurchaseTimes", "RepurchaseGoldBean", "RepurchaseRecordPoker", "RaiseGoldBean", "RaiseRecordPoker", "RoomState", "SmallBlind", "BigBlind" }, null, new[]{ typeof(global::Msg.SRoomItem.Types.RoomState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SPageInfo), global::Msg.SPageInfo.Parser, new[]{ "First", "Last", "Number", "NumberOfElements", "Size", "TotalElements", "TotalPages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomRewardList), global::Msg.SRoomRewardList.Parser, new[]{ "IsFail", "RoomRewards", "PageInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomRewardList.Types.SRoomReward), global::Msg.SRoomRewardList.Types.SRoomReward.Parser, new[]{ "Rank", "Reward" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomInstruction), global::Msg.SRoomInstruction.Parser, new[]{ "IsFail", "StartTime", "RemaindingCount", "CurrentRanking", "AvgScore", "BlindLevel", "CurrentBlind", "Ante", "UserItems", "PageInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserItem), global::Msg.SUserItem.Parser, new[]{ "UserId", "UserName", "Score", "Integral" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomPokerTable), global::Msg.SRoomPokerTable.Parser, new[]{ "IsFail", "PokerTableItems", "PageInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomPokerTable.Types.SPokerTableItem), global::Msg.SRoomPokerTable.Types.SPokerTableItem.Parser, new[]{ "TableNum", "PlayerCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomPlayer), global::Msg.SRoomPlayer.Parser, new[]{ "IsFail", "PlayderCount", "UserItems", "PageInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomBlind), global::Msg.SRoomBlind.Parser, new[]{ "IsFail", "PlayderCount", "BlindItems", "PageInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomBlind.Types.SBlindItem), global::Msg.SRoomBlind.Types.SBlindItem.Parser, new[]{ "Level", "Blind", "Goto", "RiseTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserScoreList), global::Msg.SUserScoreList.Parser, new[]{ "IsFail", "RateOfWin", "TotalPlay", "ScoreItems", "PageInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserScoreList.Types.SScoreItem), global::Msg.SUserScoreList.Types.SScoreItem.Parser, new[]{ "Id", "Blind", "PlayTime", "Rank" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserScoreDetail), global::Msg.SUserScoreDetail.Parser, new[]{ "IsFail", "Id", "Blind", "BeginTime", "EndTime", "ScoreItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserScoreDetail.Types.SScoreItem), global::Msg.SUserScoreDetail.Types.SScoreItem.Parser, new[]{ "Rank", "Avatar", "UserName", "Reward" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoomList), global::Msg.SRoomList.Parser, new[]{ "IsFail", "RoomItems", "PageInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SJoinTable), global::Msg.SJoinTable.Parser, new[]{ "IsFail", "RiseTime", "Players", "PublicCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SPlayer), global::Msg.SPlayer.Parser, new[]{ "Id", "Seat", "NickName", "Avatar", "UserChips", "TotalBettingChips", "BettingCycleChips", "Gender", "State", "HandsCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SCard), global::Msg.SCard.Parser, new[]{ "Number", "Flower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SLeftRoom), global::Msg.SLeftRoom.Parser, new[]{ "IsFail", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SChipIn), global::Msg.SChipIn.Parser, new[]{ "IsFail", "Chips", "UserId", "Type" }, null, new[]{ typeof(global::Msg.SChipIn.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SGiveUp), global::Msg.SGiveUp.Parser, new[]{ "IsFail", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRepurchase), global::Msg.SRepurchase.Parser, new[]{ "IsFail", "Id", "Seat", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SNoticeBlind), global::Msg.SNoticeBlind.Parser, new[]{ "RaiseTime", "RaiseLevel", "Blind", "PreRecordPoker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SCards), global::Msg.SCards.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SWaitAddTime), global::Msg.SWaitAddTime.Parser, new[]{ "WaitTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SResult), global::Msg.SResult.Parser, new[]{ "UserResults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserResult), global::Msg.SUserResult.Parser, new[]{ "Id", "Cards", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.STableScore), global::Msg.STableScore.Parser, new[]{ "UserScoreItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.STableScore.Types.UserScoreItem), global::Msg.STableScore.Types.UserScoreItem.Parser, new[]{ "Id", "Seat", "Score", "CardType", "Cards" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SOrderItem), global::Msg.SOrderItem.Parser, new[]{ "Id", "Seat", "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SSplitLeftSeat), global::Msg.SSplitLeftSeat.Parser, new[]{ "Seats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SVerCode), global::Msg.SVerCode.Parser, new[]{ "IsFail", "VerCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SModifyAvatar), global::Msg.SModifyAvatar.Parser, new[]{ "IsFail", "AvatarUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SChat), global::Msg.SChat.Parser, new[]{ "IsFail", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SClub), global::Msg.SClub.Parser, new[]{ "IsFail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SClubList), global::Msg.SClubList.Parser, new[]{ "IsFail", "Clubs", "PageInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SShoppingMallList), global::Msg.SShoppingMallList.Parser, new[]{ "IsFail", "ShoppingMallItems", "PageInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SShoppingMallList.Types.SShoppingMallItem), global::Msg.SShoppingMallList.Types.SShoppingMallItem.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SKnapsackList), global::Msg.SKnapsackList.Parser, new[]{ "IsFail", "KnapsackItems", "PageInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SKnapsackList.Types.SKnapsackItem), global::Msg.SKnapsackList.Types.SKnapsackItem.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SAboutUs), global::Msg.SAboutUs.Parser, new[]{ "IsFail", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SVsersion), global::Msg.SVsersion.Parser, new[]{ "IsFail", "AnVersionCode", "AnVersionDes", "AnDownloadUrl", "IosVersionCode", "IosVersionDes", "IosDownloadUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SFeedback), global::Msg.SFeedback.Parser, new[]{ "IsFail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.STable), global::Msg.STable.Parser, new[]{ "State", "SeatNo", "Capacity", "BlindUpRemain", "ButtonSeat" }, null, new[]{ typeof(global::Msg.STable.Types.TableState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SRoundWinner), global::Msg.SRoundWinner.Parser, new[]{ "Seat", "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.STip), global::Msg.STip.Parser, new[]{ "Code", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUser), global::Msg.SUser.Parser, new[]{ "IsFail", "Id", "AvatarUrl", "Phone", "Nickname", "Gender", "Level", "Money", "GameId", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SUserAction), global::Msg.SUserAction.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SGameStart), global::Msg.SGameStart.Parser, new[]{ "SmallBlindsSeat" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Gender {
    [pbr::OriginalName("MALE")] Male = 0,
    [pbr::OriginalName("FEMALE")] Female = 1,
    [pbr::OriginalName("SECRECY")] Secrecy = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ------------------房间相关信息1~99
  /// 1:SRoomItem 房间详情
  /// </summary>
  public sealed partial class SRoomItem : pb::IMessage<SRoomItem> {
    private static readonly pb::MessageParser<SRoomItem> _parser = new pb::MessageParser<SRoomItem>(() => new SRoomItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomItem(SRoomItem other) : this() {
      isFail_ = other.isFail_;
      id_ = other.id_;
      imgUrl_ = other.imgUrl_;
      name_ = other.name_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      delayTime_ = other.delayTime_;
      joinCost_ = other.joinCost_;
      serviceCost_ = other.serviceCost_;
      initScore_ = other.initScore_;
      signUpCount_ = other.signUpCount_;
      singleTableCount_ = other.singleTableCount_;
      maxRepurchaseTimes_ = other.maxRepurchaseTimes_;
      repurchaseGoldBean_ = other.repurchaseGoldBean_;
      repurchaseRecordPoker_ = other.repurchaseRecordPoker_;
      raiseGoldBean_ = other.raiseGoldBean_;
      raiseRecordPoker_ = other.raiseRecordPoker_;
      roomState_ = other.roomState_;
      smallBlind_ = other.smallBlind_;
      bigBlind_ = other.bigBlind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomItem Clone() {
      return new SRoomItem(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "img_url" field.</summary>
    public const int ImgUrlFieldNumber = 3;
    private string imgUrl_ = "";
    /// <summary>
    /// 房间图片url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgUrl {
      get { return imgUrl_; }
      set {
        imgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// 房间名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private long endTime_;
    /// <summary>
    /// 截止时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "delay_time" field.</summary>
    public const int DelayTimeFieldNumber = 7;
    private long delayTime_;
    /// <summary>
    /// 延期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    /// <summary>Field number for the "join_cost" field.</summary>
    public const int JoinCostFieldNumber = 8;
    private int joinCost_;
    /// <summary>
    /// 报名费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinCost {
      get { return joinCost_; }
      set {
        joinCost_ = value;
      }
    }

    /// <summary>Field number for the "service_cost" field.</summary>
    public const int ServiceCostFieldNumber = 9;
    private int serviceCost_;
    /// <summary>
    /// 服务费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceCost {
      get { return serviceCost_; }
      set {
        serviceCost_ = value;
      }
    }

    /// <summary>Field number for the "init_score" field.</summary>
    public const int InitScoreFieldNumber = 10;
    private int initScore_;
    /// <summary>
    /// 初始记分牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitScore {
      get { return initScore_; }
      set {
        initScore_ = value;
      }
    }

    /// <summary>Field number for the "sign_up_count" field.</summary>
    public const int SignUpCountFieldNumber = 11;
    private int signUpCount_;
    /// <summary>
    /// 报名人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignUpCount {
      get { return signUpCount_; }
      set {
        signUpCount_ = value;
      }
    }

    /// <summary>Field number for the "single_table_count" field.</summary>
    public const int SingleTableCountFieldNumber = 12;
    private int singleTableCount_;
    /// <summary>
    /// 单桌人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleTableCount {
      get { return singleTableCount_; }
      set {
        singleTableCount_ = value;
      }
    }

    /// <summary>Field number for the "max_repurchase_times" field.</summary>
    public const int MaxRepurchaseTimesFieldNumber = 13;
    private int maxRepurchaseTimes_;
    /// <summary>
    /// 最多重购次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRepurchaseTimes {
      get { return maxRepurchaseTimes_; }
      set {
        maxRepurchaseTimes_ = value;
      }
    }

    /// <summary>Field number for the "repurchase_gold_bean" field.</summary>
    public const int RepurchaseGoldBeanFieldNumber = 14;
    private int repurchaseGoldBean_;
    /// <summary>
    /// 重购金豆
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepurchaseGoldBean {
      get { return repurchaseGoldBean_; }
      set {
        repurchaseGoldBean_ = value;
      }
    }

    /// <summary>Field number for the "repurchase_record_poker" field.</summary>
    public const int RepurchaseRecordPokerFieldNumber = 15;
    private int repurchaseRecordPoker_;
    /// <summary>
    /// 重购记分牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepurchaseRecordPoker {
      get { return repurchaseRecordPoker_; }
      set {
        repurchaseRecordPoker_ = value;
      }
    }

    /// <summary>Field number for the "raise_gold_bean" field.</summary>
    public const int RaiseGoldBeanFieldNumber = 16;
    private int raiseGoldBean_;
    /// <summary>
    /// 加注金豆
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaiseGoldBean {
      get { return raiseGoldBean_; }
      set {
        raiseGoldBean_ = value;
      }
    }

    /// <summary>Field number for the "raise_record_poker" field.</summary>
    public const int RaiseRecordPokerFieldNumber = 17;
    private int raiseRecordPoker_;
    /// <summary>
    /// 加注记分牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaiseRecordPoker {
      get { return raiseRecordPoker_; }
      set {
        raiseRecordPoker_ = value;
      }
    }

    /// <summary>Field number for the "room_state" field.</summary>
    public const int RoomStateFieldNumber = 18;
    private global::Msg.SRoomItem.Types.RoomState roomState_ = 0;
    /// <summary>
    /// 房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SRoomItem.Types.RoomState RoomState {
      get { return roomState_; }
      set {
        roomState_ = value;
      }
    }

    /// <summary>Field number for the "small_blind" field.</summary>
    public const int SmallBlindFieldNumber = 19;
    private int smallBlind_;
    /// <summary>
    /// 小盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 20;
    private int bigBlind_;
    /// <summary>
    /// 大盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigBlind {
      get { return bigBlind_; }
      set {
        bigBlind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Id != other.Id) return false;
      if (ImgUrl != other.ImgUrl) return false;
      if (Name != other.Name) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (DelayTime != other.DelayTime) return false;
      if (JoinCost != other.JoinCost) return false;
      if (ServiceCost != other.ServiceCost) return false;
      if (InitScore != other.InitScore) return false;
      if (SignUpCount != other.SignUpCount) return false;
      if (SingleTableCount != other.SingleTableCount) return false;
      if (MaxRepurchaseTimes != other.MaxRepurchaseTimes) return false;
      if (RepurchaseGoldBean != other.RepurchaseGoldBean) return false;
      if (RepurchaseRecordPoker != other.RepurchaseRecordPoker) return false;
      if (RaiseGoldBean != other.RaiseGoldBean) return false;
      if (RaiseRecordPoker != other.RaiseRecordPoker) return false;
      if (RoomState != other.RoomState) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if (BigBlind != other.BigBlind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ImgUrl.Length != 0) hash ^= ImgUrl.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (DelayTime != 0L) hash ^= DelayTime.GetHashCode();
      if (JoinCost != 0) hash ^= JoinCost.GetHashCode();
      if (ServiceCost != 0) hash ^= ServiceCost.GetHashCode();
      if (InitScore != 0) hash ^= InitScore.GetHashCode();
      if (SignUpCount != 0) hash ^= SignUpCount.GetHashCode();
      if (SingleTableCount != 0) hash ^= SingleTableCount.GetHashCode();
      if (MaxRepurchaseTimes != 0) hash ^= MaxRepurchaseTimes.GetHashCode();
      if (RepurchaseGoldBean != 0) hash ^= RepurchaseGoldBean.GetHashCode();
      if (RepurchaseRecordPoker != 0) hash ^= RepurchaseRecordPoker.GetHashCode();
      if (RaiseGoldBean != 0) hash ^= RaiseGoldBean.GetHashCode();
      if (RaiseRecordPoker != 0) hash ^= RaiseRecordPoker.GetHashCode();
      if (RoomState != 0) hash ^= RoomState.GetHashCode();
      if (SmallBlind != 0) hash ^= SmallBlind.GetHashCode();
      if (BigBlind != 0) hash ^= BigBlind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (ImgUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImgUrl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndTime);
      }
      if (DelayTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(DelayTime);
      }
      if (JoinCost != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(JoinCost);
      }
      if (ServiceCost != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ServiceCost);
      }
      if (InitScore != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(InitScore);
      }
      if (SignUpCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SignUpCount);
      }
      if (SingleTableCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SingleTableCount);
      }
      if (MaxRepurchaseTimes != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxRepurchaseTimes);
      }
      if (RepurchaseGoldBean != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RepurchaseGoldBean);
      }
      if (RepurchaseRecordPoker != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RepurchaseRecordPoker);
      }
      if (RaiseGoldBean != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RaiseGoldBean);
      }
      if (RaiseRecordPoker != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RaiseRecordPoker);
      }
      if (RoomState != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) RoomState);
      }
      if (SmallBlind != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SmallBlind);
      }
      if (BigBlind != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(BigBlind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgUrl);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (DelayTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DelayTime);
      }
      if (JoinCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinCost);
      }
      if (ServiceCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceCost);
      }
      if (InitScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitScore);
      }
      if (SignUpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignUpCount);
      }
      if (SingleTableCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SingleTableCount);
      }
      if (MaxRepurchaseTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRepurchaseTimes);
      }
      if (RepurchaseGoldBean != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepurchaseGoldBean);
      }
      if (RepurchaseRecordPoker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepurchaseRecordPoker);
      }
      if (RaiseGoldBean != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RaiseGoldBean);
      }
      if (RaiseRecordPoker != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RaiseRecordPoker);
      }
      if (RoomState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomState);
      }
      if (SmallBlind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SmallBlind);
      }
      if (BigBlind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BigBlind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomItem other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ImgUrl.Length != 0) {
        ImgUrl = other.ImgUrl;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.DelayTime != 0L) {
        DelayTime = other.DelayTime;
      }
      if (other.JoinCost != 0) {
        JoinCost = other.JoinCost;
      }
      if (other.ServiceCost != 0) {
        ServiceCost = other.ServiceCost;
      }
      if (other.InitScore != 0) {
        InitScore = other.InitScore;
      }
      if (other.SignUpCount != 0) {
        SignUpCount = other.SignUpCount;
      }
      if (other.SingleTableCount != 0) {
        SingleTableCount = other.SingleTableCount;
      }
      if (other.MaxRepurchaseTimes != 0) {
        MaxRepurchaseTimes = other.MaxRepurchaseTimes;
      }
      if (other.RepurchaseGoldBean != 0) {
        RepurchaseGoldBean = other.RepurchaseGoldBean;
      }
      if (other.RepurchaseRecordPoker != 0) {
        RepurchaseRecordPoker = other.RepurchaseRecordPoker;
      }
      if (other.RaiseGoldBean != 0) {
        RaiseGoldBean = other.RaiseGoldBean;
      }
      if (other.RaiseRecordPoker != 0) {
        RaiseRecordPoker = other.RaiseRecordPoker;
      }
      if (other.RoomState != 0) {
        RoomState = other.RoomState;
      }
      if (other.SmallBlind != 0) {
        SmallBlind = other.SmallBlind;
      }
      if (other.BigBlind != 0) {
        BigBlind = other.BigBlind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            ImgUrl = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 48: {
            EndTime = input.ReadInt64();
            break;
          }
          case 56: {
            DelayTime = input.ReadInt64();
            break;
          }
          case 64: {
            JoinCost = input.ReadInt32();
            break;
          }
          case 72: {
            ServiceCost = input.ReadInt32();
            break;
          }
          case 80: {
            InitScore = input.ReadInt32();
            break;
          }
          case 88: {
            SignUpCount = input.ReadInt32();
            break;
          }
          case 96: {
            SingleTableCount = input.ReadInt32();
            break;
          }
          case 104: {
            MaxRepurchaseTimes = input.ReadInt32();
            break;
          }
          case 112: {
            RepurchaseGoldBean = input.ReadInt32();
            break;
          }
          case 120: {
            RepurchaseRecordPoker = input.ReadInt32();
            break;
          }
          case 128: {
            RaiseGoldBean = input.ReadInt32();
            break;
          }
          case 136: {
            RaiseRecordPoker = input.ReadInt32();
            break;
          }
          case 144: {
            roomState_ = (global::Msg.SRoomItem.Types.RoomState) input.ReadEnum();
            break;
          }
          case 152: {
            SmallBlind = input.ReadInt32();
            break;
          }
          case 160: {
            BigBlind = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SRoomItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RoomState {
        /// <summary>
        /// 可报名
        /// </summary>
        [pbr::OriginalName("canSignUp")] CanSignUp = 0,
        /// <summary>
        /// 延时报名
        /// </summary>
        [pbr::OriginalName("delaySignUp")] DelaySignUp = 1,
        /// <summary>
        /// 围观
        /// </summary>
        [pbr::OriginalName("onlookers")] Onlookers = 2,
      }

    }
    #endregion

  }

  public sealed partial class SPageInfo : pb::IMessage<SPageInfo> {
    private static readonly pb::MessageParser<SPageInfo> _parser = new pb::MessageParser<SPageInfo>(() => new SPageInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SPageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPageInfo(SPageInfo other) : this() {
      first_ = other.first_;
      last_ = other.last_;
      number_ = other.number_;
      numberOfElements_ = other.numberOfElements_;
      size_ = other.size_;
      totalElements_ = other.totalElements_;
      totalPages_ = other.totalPages_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPageInfo Clone() {
      return new SPageInfo(this);
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 1;
    private bool first_;
    /// <summary>
    /// 是否第一页
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 2;
    private bool last_;
    /// <summary>
    /// 是否最后一页
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 3;
    private int number_;
    /// <summary>
    /// 当前页
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "number_of_elements" field.</summary>
    public const int NumberOfElementsFieldNumber = 4;
    private int numberOfElements_;
    /// <summary>
    /// 当前页的元素个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfElements {
      get { return numberOfElements_; }
      set {
        numberOfElements_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private int size_;
    /// <summary>
    /// 页面积
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "total_elements" field.</summary>
    public const int TotalElementsFieldNumber = 6;
    private int totalElements_;
    /// <summary>
    /// 总记录数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalElements {
      get { return totalElements_; }
      set {
        totalElements_ = value;
      }
    }

    /// <summary>Field number for the "total_pages" field.</summary>
    public const int TotalPagesFieldNumber = 7;
    private int totalPages_;
    /// <summary>
    /// 总页数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SPageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SPageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (First != other.First) return false;
      if (Last != other.Last) return false;
      if (Number != other.Number) return false;
      if (NumberOfElements != other.NumberOfElements) return false;
      if (Size != other.Size) return false;
      if (TotalElements != other.TotalElements) return false;
      if (TotalPages != other.TotalPages) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (First != false) hash ^= First.GetHashCode();
      if (Last != false) hash ^= Last.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (NumberOfElements != 0) hash ^= NumberOfElements.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (TotalElements != 0) hash ^= TotalElements.GetHashCode();
      if (TotalPages != 0) hash ^= TotalPages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (First != false) {
        output.WriteRawTag(8);
        output.WriteBool(First);
      }
      if (Last != false) {
        output.WriteRawTag(16);
        output.WriteBool(Last);
      }
      if (Number != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Number);
      }
      if (NumberOfElements != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumberOfElements);
      }
      if (Size != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Size);
      }
      if (TotalElements != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalElements);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalPages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (First != false) {
        size += 1 + 1;
      }
      if (Last != false) {
        size += 1 + 1;
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (NumberOfElements != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfElements);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (TotalElements != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalElements);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SPageInfo other) {
      if (other == null) {
        return;
      }
      if (other.First != false) {
        First = other.First;
      }
      if (other.Last != false) {
        Last = other.Last;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.NumberOfElements != 0) {
        NumberOfElements = other.NumberOfElements;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.TotalElements != 0) {
        TotalElements = other.TotalElements;
      }
      if (other.TotalPages != 0) {
        TotalPages = other.TotalPages;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            First = input.ReadBool();
            break;
          }
          case 16: {
            Last = input.ReadBool();
            break;
          }
          case 24: {
            Number = input.ReadInt32();
            break;
          }
          case 32: {
            NumberOfElements = input.ReadInt32();
            break;
          }
          case 40: {
            Size = input.ReadInt32();
            break;
          }
          case 48: {
            TotalElements = input.ReadInt32();
            break;
          }
          case 56: {
            TotalPages = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2:SRoomRewardList 房间奖励
  /// </summary>
  public sealed partial class SRoomRewardList : pb::IMessage<SRoomRewardList> {
    private static readonly pb::MessageParser<SRoomRewardList> _parser = new pb::MessageParser<SRoomRewardList>(() => new SRoomRewardList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomRewardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomRewardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomRewardList(SRoomRewardList other) : this() {
      isFail_ = other.isFail_;
      roomRewards_ = other.roomRewards_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomRewardList Clone() {
      return new SRoomRewardList(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "room_rewards" field.</summary>
    public const int RoomRewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SRoomRewardList.Types.SRoomReward> _repeated_roomRewards_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SRoomRewardList.Types.SRoomReward.Parser);
    private readonly pbc::RepeatedField<global::Msg.SRoomRewardList.Types.SRoomReward> roomRewards_ = new pbc::RepeatedField<global::Msg.SRoomRewardList.Types.SRoomReward>();
    /// <summary>
    /// 奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SRoomRewardList.Types.SRoomReward> RoomRewards {
      get { return roomRewards_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 3;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomRewardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomRewardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if(!roomRewards_.Equals(other.roomRewards_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      hash ^= roomRewards_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      roomRewards_.WriteTo(output, _repeated_roomRewards_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      size += roomRewards_.CalculateSize(_repeated_roomRewards_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomRewardList other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      roomRewards_.Add(other.roomRewards_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            roomRewards_.AddEntriesFrom(input, _repeated_roomRewards_codec);
            break;
          }
          case 26: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SRoomRewardList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SRoomReward : pb::IMessage<SRoomReward> {
        private static readonly pb::MessageParser<SRoomReward> _parser = new pb::MessageParser<SRoomReward>(() => new SRoomReward());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SRoomReward> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SRoomRewardList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SRoomReward() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SRoomReward(SRoomReward other) : this() {
          rank_ = other.rank_;
          reward_ = other.reward_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SRoomReward Clone() {
          return new SRoomReward(this);
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 1;
        private string rank_ = "";
        /// <summary>
        /// 名次
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Rank {
          get { return rank_; }
          set {
            rank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "reward" field.</summary>
        public const int RewardFieldNumber = 2;
        private string reward_ = "";
        /// <summary>
        /// 奖励
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Reward {
          get { return reward_; }
          set {
            reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SRoomReward);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SRoomReward other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Rank != other.Rank) return false;
          if (Reward != other.Reward) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Rank.Length != 0) hash ^= Rank.GetHashCode();
          if (Reward.Length != 0) hash ^= Reward.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Rank.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Rank);
          }
          if (Reward.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Reward);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Rank.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Rank);
          }
          if (Reward.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SRoomReward other) {
          if (other == null) {
            return;
          }
          if (other.Rank.Length != 0) {
            Rank = other.Rank;
          }
          if (other.Reward.Length != 0) {
            Reward = other.Reward;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Rank = input.ReadString();
                break;
              }
              case 18: {
                Reward = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 3:SRoomInstruction 赛事说明
  /// </summary>
  public sealed partial class SRoomInstruction : pb::IMessage<SRoomInstruction> {
    private static readonly pb::MessageParser<SRoomInstruction> _parser = new pb::MessageParser<SRoomInstruction>(() => new SRoomInstruction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomInstruction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomInstruction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomInstruction(SRoomInstruction other) : this() {
      isFail_ = other.isFail_;
      startTime_ = other.startTime_;
      remaindingCount_ = other.remaindingCount_;
      currentRanking_ = other.currentRanking_;
      avgScore_ = other.avgScore_;
      blindLevel_ = other.blindLevel_;
      currentBlind_ = other.currentBlind_;
      ante_ = other.ante_;
      userItems_ = other.userItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomInstruction Clone() {
      return new SRoomInstruction(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    /// <summary>
    /// 开赛时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "remainding_count" field.</summary>
    public const int RemaindingCountFieldNumber = 3;
    private int remaindingCount_;
    /// <summary>
    /// 剩余人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemaindingCount {
      get { return remaindingCount_; }
      set {
        remaindingCount_ = value;
      }
    }

    /// <summary>Field number for the "current_ranking" field.</summary>
    public const int CurrentRankingFieldNumber = 4;
    private int currentRanking_;
    /// <summary>
    /// 当前排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentRanking {
      get { return currentRanking_; }
      set {
        currentRanking_ = value;
      }
    }

    /// <summary>Field number for the "avg_score" field.</summary>
    public const int AvgScoreFieldNumber = 5;
    private int avgScore_;
    /// <summary>
    /// 平均记分牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvgScore {
      get { return avgScore_; }
      set {
        avgScore_ = value;
      }
    }

    /// <summary>Field number for the "blind_level" field.</summary>
    public const int BlindLevelFieldNumber = 6;
    private int blindLevel_;
    /// <summary>
    /// 盲注级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlindLevel {
      get { return blindLevel_; }
      set {
        blindLevel_ = value;
      }
    }

    /// <summary>Field number for the "current_blind" field.</summary>
    public const int CurrentBlindFieldNumber = 7;
    private int currentBlind_;
    /// <summary>
    /// 当前盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentBlind {
      get { return currentBlind_; }
      set {
        currentBlind_ = value;
      }
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 8;
    private int ante_;
    /// <summary>
    /// 预付款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Msg.SUserItem> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(74, global::Msg.SUserItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SUserItem> userItems_ = new pbc::RepeatedField<global::Msg.SUserItem>();
    /// <summary>
    /// 用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SUserItem> UserItems {
      get { return userItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 10;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomInstruction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomInstruction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (StartTime != other.StartTime) return false;
      if (RemaindingCount != other.RemaindingCount) return false;
      if (CurrentRanking != other.CurrentRanking) return false;
      if (AvgScore != other.AvgScore) return false;
      if (BlindLevel != other.BlindLevel) return false;
      if (CurrentBlind != other.CurrentBlind) return false;
      if (Ante != other.Ante) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (RemaindingCount != 0) hash ^= RemaindingCount.GetHashCode();
      if (CurrentRanking != 0) hash ^= CurrentRanking.GetHashCode();
      if (AvgScore != 0) hash ^= AvgScore.GetHashCode();
      if (BlindLevel != 0) hash ^= BlindLevel.GetHashCode();
      if (CurrentBlind != 0) hash ^= CurrentBlind.GetHashCode();
      if (Ante != 0) hash ^= Ante.GetHashCode();
      hash ^= userItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (RemaindingCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemaindingCount);
      }
      if (CurrentRanking != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentRanking);
      }
      if (AvgScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AvgScore);
      }
      if (BlindLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlindLevel);
      }
      if (CurrentBlind != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurrentBlind);
      }
      if (Ante != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ante);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (RemaindingCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemaindingCount);
      }
      if (CurrentRanking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentRanking);
      }
      if (AvgScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvgScore);
      }
      if (BlindLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlindLevel);
      }
      if (CurrentBlind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBlind);
      }
      if (Ante != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ante);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomInstruction other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.RemaindingCount != 0) {
        RemaindingCount = other.RemaindingCount;
      }
      if (other.CurrentRanking != 0) {
        CurrentRanking = other.CurrentRanking;
      }
      if (other.AvgScore != 0) {
        AvgScore = other.AvgScore;
      }
      if (other.BlindLevel != 0) {
        BlindLevel = other.BlindLevel;
      }
      if (other.CurrentBlind != 0) {
        CurrentBlind = other.CurrentBlind;
      }
      if (other.Ante != 0) {
        Ante = other.Ante;
      }
      userItems_.Add(other.userItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            RemaindingCount = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentRanking = input.ReadInt32();
            break;
          }
          case 40: {
            AvgScore = input.ReadInt32();
            break;
          }
          case 48: {
            BlindLevel = input.ReadInt32();
            break;
          }
          case 56: {
            CurrentBlind = input.ReadInt32();
            break;
          }
          case 64: {
            Ante = input.ReadInt32();
            break;
          }
          case 74: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
          case 82: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SUserItem : pb::IMessage<SUserItem> {
    private static readonly pb::MessageParser<SUserItem> _parser = new pb::MessageParser<SUserItem>(() => new SUserItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserItem(SUserItem other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
      score_ = other.score_;
      integral_ = other.integral_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserItem Clone() {
      return new SUserItem(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 2;
    private int userName_;
    /// <summary>
    /// 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserName {
      get { return userName_; }
      set {
        userName_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 带入的分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 4;
    private int integral_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (Score != other.Score) return false;
      if (Integral != other.Integral) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (UserName != 0) hash ^= UserName.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Integral != 0) hash ^= Integral.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (UserName != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserName);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (Integral != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Integral);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (UserName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Integral != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserItem other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.UserName != 0) {
        UserName = other.UserName;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Integral != 0) {
        Integral = other.Integral;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            UserName = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            Integral = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 4:SRoomPokerTable 房间牌桌
  /// </summary>
  public sealed partial class SRoomPokerTable : pb::IMessage<SRoomPokerTable> {
    private static readonly pb::MessageParser<SRoomPokerTable> _parser = new pb::MessageParser<SRoomPokerTable>(() => new SRoomPokerTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomPokerTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomPokerTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomPokerTable(SRoomPokerTable other) : this() {
      isFail_ = other.isFail_;
      pokerTableItems_ = other.pokerTableItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomPokerTable Clone() {
      return new SRoomPokerTable(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "poker_table_items" field.</summary>
    public const int PokerTableItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SRoomPokerTable.Types.SPokerTableItem> _repeated_pokerTableItems_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SRoomPokerTable.Types.SPokerTableItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SRoomPokerTable.Types.SPokerTableItem> pokerTableItems_ = new pbc::RepeatedField<global::Msg.SRoomPokerTable.Types.SPokerTableItem>();
    /// <summary>
    /// 牌桌条目列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SRoomPokerTable.Types.SPokerTableItem> PokerTableItems {
      get { return pokerTableItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 3;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomPokerTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomPokerTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if(!pokerTableItems_.Equals(other.pokerTableItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      hash ^= pokerTableItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      pokerTableItems_.WriteTo(output, _repeated_pokerTableItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      size += pokerTableItems_.CalculateSize(_repeated_pokerTableItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomPokerTable other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      pokerTableItems_.Add(other.pokerTableItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            pokerTableItems_.AddEntriesFrom(input, _repeated_pokerTableItems_codec);
            break;
          }
          case 26: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SRoomPokerTable message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 牌桌条目
      /// </summary>
      public sealed partial class SPokerTableItem : pb::IMessage<SPokerTableItem> {
        private static readonly pb::MessageParser<SPokerTableItem> _parser = new pb::MessageParser<SPokerTableItem>(() => new SPokerTableItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SPokerTableItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SRoomPokerTable.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SPokerTableItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SPokerTableItem(SPokerTableItem other) : this() {
          tableNum_ = other.tableNum_;
          playerCount_ = other.playerCount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SPokerTableItem Clone() {
          return new SPokerTableItem(this);
        }

        /// <summary>Field number for the "table_num" field.</summary>
        public const int TableNumFieldNumber = 1;
        private int tableNum_;
        /// <summary>
        /// 桌号
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TableNum {
          get { return tableNum_; }
          set {
            tableNum_ = value;
          }
        }

        /// <summary>Field number for the "player_count" field.</summary>
        public const int PlayerCountFieldNumber = 2;
        private int playerCount_;
        /// <summary>
        /// 分数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PlayerCount {
          get { return playerCount_; }
          set {
            playerCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SPokerTableItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SPokerTableItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TableNum != other.TableNum) return false;
          if (PlayerCount != other.PlayerCount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TableNum != 0) hash ^= TableNum.GetHashCode();
          if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TableNum != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TableNum);
          }
          if (PlayerCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(PlayerCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TableNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNum);
          }
          if (PlayerCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SPokerTableItem other) {
          if (other == null) {
            return;
          }
          if (other.TableNum != 0) {
            TableNum = other.TableNum;
          }
          if (other.PlayerCount != 0) {
            PlayerCount = other.PlayerCount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TableNum = input.ReadInt32();
                break;
              }
              case 16: {
                PlayerCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 5:SRoomPlayer 房间玩家
  /// </summary>
  public sealed partial class SRoomPlayer : pb::IMessage<SRoomPlayer> {
    private static readonly pb::MessageParser<SRoomPlayer> _parser = new pb::MessageParser<SRoomPlayer>(() => new SRoomPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomPlayer(SRoomPlayer other) : this() {
      isFail_ = other.isFail_;
      playderCount_ = other.playderCount_;
      userItems_ = other.userItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomPlayer Clone() {
      return new SRoomPlayer(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "playder_count" field.</summary>
    public const int PlayderCountFieldNumber = 2;
    private int playderCount_;
    /// <summary>
    /// 已报名人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayderCount {
      get { return playderCount_; }
      set {
        playderCount_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.SUserItem> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.SUserItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SUserItem> userItems_ = new pbc::RepeatedField<global::Msg.SUserItem>();
    /// <summary>
    /// 用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SUserItem> UserItems {
      get { return userItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 4;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (PlayderCount != other.PlayderCount) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (PlayderCount != 0) hash ^= PlayderCount.GetHashCode();
      hash ^= userItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (PlayderCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayderCount);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (PlayderCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayderCount);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomPlayer other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.PlayderCount != 0) {
        PlayderCount = other.PlayderCount;
      }
      userItems_.Add(other.userItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            PlayderCount = input.ReadInt32();
            break;
          }
          case 26: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
          case 34: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 6:SRoomBlind 房间盲注
  /// </summary>
  public sealed partial class SRoomBlind : pb::IMessage<SRoomBlind> {
    private static readonly pb::MessageParser<SRoomBlind> _parser = new pb::MessageParser<SRoomBlind>(() => new SRoomBlind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomBlind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomBlind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomBlind(SRoomBlind other) : this() {
      isFail_ = other.isFail_;
      playderCount_ = other.playderCount_;
      blindItems_ = other.blindItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomBlind Clone() {
      return new SRoomBlind(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "playder_count" field.</summary>
    public const int PlayderCountFieldNumber = 2;
    private int playderCount_;
    /// <summary>
    /// 已报名人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayderCount {
      get { return playderCount_; }
      set {
        playderCount_ = value;
      }
    }

    /// <summary>Field number for the "blind_items" field.</summary>
    public const int BlindItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Msg.SRoomBlind.Types.SBlindItem> _repeated_blindItems_codec
        = pb::FieldCodec.ForMessage(26, global::Msg.SRoomBlind.Types.SBlindItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SRoomBlind.Types.SBlindItem> blindItems_ = new pbc::RepeatedField<global::Msg.SRoomBlind.Types.SBlindItem>();
    /// <summary>
    /// 用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SRoomBlind.Types.SBlindItem> BlindItems {
      get { return blindItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 4;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomBlind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomBlind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (PlayderCount != other.PlayderCount) return false;
      if(!blindItems_.Equals(other.blindItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (PlayderCount != 0) hash ^= PlayderCount.GetHashCode();
      hash ^= blindItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (PlayderCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayderCount);
      }
      blindItems_.WriteTo(output, _repeated_blindItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (PlayderCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayderCount);
      }
      size += blindItems_.CalculateSize(_repeated_blindItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomBlind other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.PlayderCount != 0) {
        PlayderCount = other.PlayderCount;
      }
      blindItems_.Add(other.blindItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            PlayderCount = input.ReadInt32();
            break;
          }
          case 26: {
            blindItems_.AddEntriesFrom(input, _repeated_blindItems_codec);
            break;
          }
          case 34: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SRoomBlind message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 盲注条目
      /// </summary>
      public sealed partial class SBlindItem : pb::IMessage<SBlindItem> {
        private static readonly pb::MessageParser<SBlindItem> _parser = new pb::MessageParser<SBlindItem>(() => new SBlindItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SBlindItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SRoomBlind.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SBlindItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SBlindItem(SBlindItem other) : this() {
          level_ = other.level_;
          blind_ = other.blind_;
          goto_ = other.goto_;
          riseTime_ = other.riseTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SBlindItem Clone() {
          return new SBlindItem(this);
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 1;
        private string level_ = "";
        /// <summary>
        /// 等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Level {
          get { return level_; }
          set {
            level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "blind" field.</summary>
        public const int BlindFieldNumber = 2;
        private int blind_;
        /// <summary>
        /// 盲注
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Blind {
          get { return blind_; }
          set {
            blind_ = value;
          }
        }

        /// <summary>Field number for the "goto" field.</summary>
        public const int GotoFieldNumber = 3;
        private int goto_;
        /// <summary>
        /// 前往
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Goto {
          get { return goto_; }
          set {
            goto_ = value;
          }
        }

        /// <summary>Field number for the "rise_time" field.</summary>
        public const int RiseTimeFieldNumber = 4;
        private int riseTime_;
        /// <summary>
        /// 升盲时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RiseTime {
          get { return riseTime_; }
          set {
            riseTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SBlindItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SBlindItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Level != other.Level) return false;
          if (Blind != other.Blind) return false;
          if (Goto != other.Goto) return false;
          if (RiseTime != other.RiseTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Level.Length != 0) hash ^= Level.GetHashCode();
          if (Blind != 0) hash ^= Blind.GetHashCode();
          if (Goto != 0) hash ^= Goto.GetHashCode();
          if (RiseTime != 0) hash ^= RiseTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Level.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Level);
          }
          if (Blind != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Blind);
          }
          if (Goto != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Goto);
          }
          if (RiseTime != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(RiseTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Level.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
          }
          if (Blind != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blind);
          }
          if (Goto != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goto);
          }
          if (RiseTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiseTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SBlindItem other) {
          if (other == null) {
            return;
          }
          if (other.Level.Length != 0) {
            Level = other.Level;
          }
          if (other.Blind != 0) {
            Blind = other.Blind;
          }
          if (other.Goto != 0) {
            Goto = other.Goto;
          }
          if (other.RiseTime != 0) {
            RiseTime = other.RiseTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Level = input.ReadString();
                break;
              }
              case 16: {
                Blind = input.ReadInt32();
                break;
              }
              case 24: {
                Goto = input.ReadInt32();
                break;
              }
              case 32: {
                RiseTime = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 7:SUserScoreList 用户战绩列表
  /// </summary>
  public sealed partial class SUserScoreList : pb::IMessage<SUserScoreList> {
    private static readonly pb::MessageParser<SUserScoreList> _parser = new pb::MessageParser<SUserScoreList>(() => new SUserScoreList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserScoreList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserScoreList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserScoreList(SUserScoreList other) : this() {
      isFail_ = other.isFail_;
      rateOfWin_ = other.rateOfWin_;
      totalPlay_ = other.totalPlay_;
      scoreItems_ = other.scoreItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserScoreList Clone() {
      return new SUserScoreList(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "rate_of_win" field.</summary>
    public const int RateOfWinFieldNumber = 2;
    private string rateOfWin_ = "";
    /// <summary>
    /// 比赛胜率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateOfWin {
      get { return rateOfWin_; }
      set {
        rateOfWin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_play" field.</summary>
    public const int TotalPlayFieldNumber = 3;
    private int totalPlay_;
    /// <summary>
    /// 总手数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPlay {
      get { return totalPlay_; }
      set {
        totalPlay_ = value;
      }
    }

    /// <summary>Field number for the "score_items" field.</summary>
    public const int ScoreItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.SUserScoreList.Types.SScoreItem> _repeated_scoreItems_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.SUserScoreList.Types.SScoreItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SUserScoreList.Types.SScoreItem> scoreItems_ = new pbc::RepeatedField<global::Msg.SUserScoreList.Types.SScoreItem>();
    /// <summary>
    /// 分数信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SUserScoreList.Types.SScoreItem> ScoreItems {
      get { return scoreItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 5;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserScoreList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserScoreList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (RateOfWin != other.RateOfWin) return false;
      if (TotalPlay != other.TotalPlay) return false;
      if(!scoreItems_.Equals(other.scoreItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (RateOfWin.Length != 0) hash ^= RateOfWin.GetHashCode();
      if (TotalPlay != 0) hash ^= TotalPlay.GetHashCode();
      hash ^= scoreItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (RateOfWin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RateOfWin);
      }
      if (TotalPlay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalPlay);
      }
      scoreItems_.WriteTo(output, _repeated_scoreItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (RateOfWin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateOfWin);
      }
      if (TotalPlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPlay);
      }
      size += scoreItems_.CalculateSize(_repeated_scoreItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserScoreList other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.RateOfWin.Length != 0) {
        RateOfWin = other.RateOfWin;
      }
      if (other.TotalPlay != 0) {
        TotalPlay = other.TotalPlay;
      }
      scoreItems_.Add(other.scoreItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            RateOfWin = input.ReadString();
            break;
          }
          case 24: {
            TotalPlay = input.ReadInt32();
            break;
          }
          case 34: {
            scoreItems_.AddEntriesFrom(input, _repeated_scoreItems_codec);
            break;
          }
          case 42: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SUserScoreList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 分数条目
      /// </summary>
      public sealed partial class SScoreItem : pb::IMessage<SScoreItem> {
        private static readonly pb::MessageParser<SScoreItem> _parser = new pb::MessageParser<SScoreItem>(() => new SScoreItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SScoreItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SUserScoreList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SScoreItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SScoreItem(SScoreItem other) : this() {
          id_ = other.id_;
          blind_ = other.blind_;
          playTime_ = other.playTime_;
          rank_ = other.rank_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SScoreItem Clone() {
          return new SScoreItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        /// <summary>
        /// 分数ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "blind" field.</summary>
        public const int BlindFieldNumber = 2;
        private string blind_ = "";
        /// <summary>
        /// 标题
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Blind {
          get { return blind_; }
          set {
            blind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "play_time" field.</summary>
        public const int PlayTimeFieldNumber = 3;
        private long playTime_;
        /// <summary>
        /// 参与时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PlayTime {
          get { return playTime_; }
          set {
            playTime_ = value;
          }
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 4;
        private string rank_ = "";
        /// <summary>
        /// 排名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Rank {
          get { return rank_; }
          set {
            rank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SScoreItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SScoreItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Blind != other.Blind) return false;
          if (PlayTime != other.PlayTime) return false;
          if (Rank != other.Rank) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Blind.Length != 0) hash ^= Blind.GetHashCode();
          if (PlayTime != 0L) hash ^= PlayTime.GetHashCode();
          if (Rank.Length != 0) hash ^= Rank.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Blind.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Blind);
          }
          if (PlayTime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(PlayTime);
          }
          if (Rank.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Rank);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Blind.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Blind);
          }
          if (PlayTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayTime);
          }
          if (Rank.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Rank);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SScoreItem other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Blind.Length != 0) {
            Blind = other.Blind;
          }
          if (other.PlayTime != 0L) {
            PlayTime = other.PlayTime;
          }
          if (other.Rank.Length != 0) {
            Rank = other.Rank;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Blind = input.ReadString();
                break;
              }
              case 24: {
                PlayTime = input.ReadInt64();
                break;
              }
              case 34: {
                Rank = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 8:SUserScoreDetail 战绩详情
  /// </summary>
  public sealed partial class SUserScoreDetail : pb::IMessage<SUserScoreDetail> {
    private static readonly pb::MessageParser<SUserScoreDetail> _parser = new pb::MessageParser<SUserScoreDetail>(() => new SUserScoreDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserScoreDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserScoreDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserScoreDetail(SUserScoreDetail other) : this() {
      isFail_ = other.isFail_;
      id_ = other.id_;
      blind_ = other.blind_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      scoreItems_ = other.scoreItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserScoreDetail Clone() {
      return new SUserScoreDetail(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 分数ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 3;
    private string blind_ = "";
    /// <summary>
    /// 标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Blind {
      get { return blind_; }
      set {
        blind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 4;
    private long beginTime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private long endTime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "score_items" field.</summary>
    public const int ScoreItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Msg.SUserScoreDetail.Types.SScoreItem> _repeated_scoreItems_codec
        = pb::FieldCodec.ForMessage(50, global::Msg.SUserScoreDetail.Types.SScoreItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SUserScoreDetail.Types.SScoreItem> scoreItems_ = new pbc::RepeatedField<global::Msg.SUserScoreDetail.Types.SScoreItem>();
    /// <summary>
    /// 分数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SUserScoreDetail.Types.SScoreItem> ScoreItems {
      get { return scoreItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserScoreDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserScoreDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Id != other.Id) return false;
      if (Blind != other.Blind) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!scoreItems_.Equals(other.scoreItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Blind.Length != 0) hash ^= Blind.GetHashCode();
      if (BeginTime != 0L) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= scoreItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Blind.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Blind);
      }
      if (BeginTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BeginTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndTime);
      }
      scoreItems_.WriteTo(output, _repeated_scoreItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Blind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Blind);
      }
      if (BeginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += scoreItems_.CalculateSize(_repeated_scoreItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserScoreDetail other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Blind.Length != 0) {
        Blind = other.Blind;
      }
      if (other.BeginTime != 0L) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      scoreItems_.Add(other.scoreItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Blind = input.ReadString();
            break;
          }
          case 32: {
            BeginTime = input.ReadInt64();
            break;
          }
          case 40: {
            EndTime = input.ReadInt64();
            break;
          }
          case 50: {
            scoreItems_.AddEntriesFrom(input, _repeated_scoreItems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SUserScoreDetail message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 分数条目
      /// </summary>
      public sealed partial class SScoreItem : pb::IMessage<SScoreItem> {
        private static readonly pb::MessageParser<SScoreItem> _parser = new pb::MessageParser<SScoreItem>(() => new SScoreItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SScoreItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SUserScoreDetail.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SScoreItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SScoreItem(SScoreItem other) : this() {
          rank_ = other.rank_;
          avatar_ = other.avatar_;
          userName_ = other.userName_;
          reward_ = other.reward_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SScoreItem Clone() {
          return new SScoreItem(this);
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 1;
        private int rank_;
        /// <summary>
        /// 排名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rank {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        /// <summary>Field number for the "avatar" field.</summary>
        public const int AvatarFieldNumber = 2;
        private string avatar_ = "";
        /// <summary>
        /// 头像路径
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Avatar {
          get { return avatar_; }
          set {
            avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_name" field.</summary>
        public const int UserNameFieldNumber = 3;
        private string userName_ = "";
        /// <summary>
        /// 用户名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserName {
          get { return userName_; }
          set {
            userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "reward" field.</summary>
        public const int RewardFieldNumber = 4;
        private string reward_ = "";
        /// <summary>
        /// 奖励
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Reward {
          get { return reward_; }
          set {
            reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SScoreItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SScoreItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Rank != other.Rank) return false;
          if (Avatar != other.Avatar) return false;
          if (UserName != other.UserName) return false;
          if (Reward != other.Reward) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Rank != 0) hash ^= Rank.GetHashCode();
          if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
          if (UserName.Length != 0) hash ^= UserName.GetHashCode();
          if (Reward.Length != 0) hash ^= Reward.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Rank != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Rank);
          }
          if (Avatar.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Avatar);
          }
          if (UserName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(UserName);
          }
          if (Reward.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Reward);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Rank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
          }
          if (Avatar.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
          }
          if (UserName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
          }
          if (Reward.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SScoreItem other) {
          if (other == null) {
            return;
          }
          if (other.Rank != 0) {
            Rank = other.Rank;
          }
          if (other.Avatar.Length != 0) {
            Avatar = other.Avatar;
          }
          if (other.UserName.Length != 0) {
            UserName = other.UserName;
          }
          if (other.Reward.Length != 0) {
            Reward = other.Reward;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Rank = input.ReadInt32();
                break;
              }
              case 18: {
                Avatar = input.ReadString();
                break;
              }
              case 26: {
                UserName = input.ReadString();
                break;
              }
              case 34: {
                Reward = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 9:SRoomList 房间列表
  /// </summary>
  public sealed partial class SRoomList : pb::IMessage<SRoomList> {
    private static readonly pb::MessageParser<SRoomList> _parser = new pb::MessageParser<SRoomList>(() => new SRoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomList(SRoomList other) : this() {
      isFail_ = other.isFail_;
      roomItems_ = other.roomItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoomList Clone() {
      return new SRoomList(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "room_items" field.</summary>
    public const int RoomItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SRoomItem> _repeated_roomItems_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SRoomItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SRoomItem> roomItems_ = new pbc::RepeatedField<global::Msg.SRoomItem>();
    /// <summary>
    /// 房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SRoomItem> RoomItems {
      get { return roomItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 3;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if(!roomItems_.Equals(other.roomItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      hash ^= roomItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      roomItems_.WriteTo(output, _repeated_roomItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      size += roomItems_.CalculateSize(_repeated_roomItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoomList other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      roomItems_.Add(other.roomItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            roomItems_.AddEntriesFrom(input, _repeated_roomItems_codec);
            break;
          }
          case 26: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入房间 code:10 返回给本人
  /// </summary>
  public sealed partial class SJoinTable : pb::IMessage<SJoinTable> {
    private static readonly pb::MessageParser<SJoinTable> _parser = new pb::MessageParser<SJoinTable>(() => new SJoinTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SJoinTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SJoinTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SJoinTable(SJoinTable other) : this() {
      isFail_ = other.isFail_;
      riseTime_ = other.riseTime_;
      players_ = other.players_.Clone();
      publicCards_ = other.publicCards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SJoinTable Clone() {
      return new SJoinTable(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "rise_time" field.</summary>
    public const int RiseTimeFieldNumber = 2;
    private int riseTime_;
    /// <summary>
    /// 升盲时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiseTime {
      get { return riseTime_; }
      set {
        riseTime_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.SPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.SPlayer.Parser);
    private readonly pbc::RepeatedField<global::Msg.SPlayer> players_ = new pbc::RepeatedField<global::Msg.SPlayer>();
    /// <summary>
    /// 当前操作人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SPlayer> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "public_cards" field.</summary>
    public const int PublicCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Msg.SCard> _repeated_publicCards_codec
        = pb::FieldCodec.ForMessage(42, global::Msg.SCard.Parser);
    private readonly pbc::RepeatedField<global::Msg.SCard> publicCards_ = new pbc::RepeatedField<global::Msg.SCard>();
    /// <summary>
    /// 发出的牌（那5张）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SCard> PublicCards {
      get { return publicCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SJoinTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SJoinTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (RiseTime != other.RiseTime) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!publicCards_.Equals(other.publicCards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (RiseTime != 0) hash ^= RiseTime.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= publicCards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (RiseTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RiseTime);
      }
      players_.WriteTo(output, _repeated_players_codec);
      publicCards_.WriteTo(output, _repeated_publicCards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (RiseTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiseTime);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += publicCards_.CalculateSize(_repeated_publicCards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SJoinTable other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.RiseTime != 0) {
        RiseTime = other.RiseTime;
      }
      players_.Add(other.players_);
      publicCards_.Add(other.publicCards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            RiseTime = input.ReadInt32();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 42: {
            publicCards_.AddEntriesFrom(input, _repeated_publicCards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入房间 code:20 返回给房间里的人
  /// </summary>
  public sealed partial class SPlayer : pb::IMessage<SPlayer> {
    private static readonly pb::MessageParser<SPlayer> _parser = new pb::MessageParser<SPlayer>(() => new SPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPlayer(SPlayer other) : this() {
      id_ = other.id_;
      seat_ = other.seat_;
      nickName_ = other.nickName_;
      avatar_ = other.avatar_;
      userChips_ = other.userChips_;
      totalBettingChips_ = other.totalBettingChips_;
      bettingCycleChips_ = other.bettingCycleChips_;
      gender_ = other.gender_;
      state_ = other.state_;
      handsCards_ = other.handsCards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPlayer Clone() {
      return new SPlayer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 2;
    private int seat_;
    /// <summary>
    /// 座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    /// <summary>
    /// 姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private string avatar_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_chips" field.</summary>
    public const int UserChipsFieldNumber = 5;
    private int userChips_;
    /// <summary>
    /// 筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserChips {
      get { return userChips_; }
      set {
        userChips_ = value;
      }
    }

    /// <summary>Field number for the "total_betting_chips" field.</summary>
    public const int TotalBettingChipsFieldNumber = 6;
    private int totalBettingChips_;
    /// <summary>
    /// 总下的注额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalBettingChips {
      get { return totalBettingChips_; }
      set {
        totalBettingChips_ = value;
      }
    }

    /// <summary>Field number for the "betting_cycle_chips" field.</summary>
    public const int BettingCycleChipsFieldNumber = 7;
    private int bettingCycleChips_;
    /// <summary>
    /// 当前下的注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BettingCycleChips {
      get { return bettingCycleChips_; }
      set {
        bettingCycleChips_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 8;
    private global::Msg.Gender gender_ = 0;
    /// <summary>
    /// 性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 9;
    private int state_;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "hands_cards" field.</summary>
    public const int HandsCardsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Msg.SCard> _repeated_handsCards_codec
        = pb::FieldCodec.ForMessage(82, global::Msg.SCard.Parser);
    private readonly pbc::RepeatedField<global::Msg.SCard> handsCards_ = new pbc::RepeatedField<global::Msg.SCard>();
    /// <summary>
    /// 用户的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SCard> HandsCards {
      get { return handsCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Seat != other.Seat) return false;
      if (NickName != other.NickName) return false;
      if (Avatar != other.Avatar) return false;
      if (UserChips != other.UserChips) return false;
      if (TotalBettingChips != other.TotalBettingChips) return false;
      if (BettingCycleChips != other.BettingCycleChips) return false;
      if (Gender != other.Gender) return false;
      if (State != other.State) return false;
      if(!handsCards_.Equals(other.handsCards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (UserChips != 0) hash ^= UserChips.GetHashCode();
      if (TotalBettingChips != 0) hash ^= TotalBettingChips.GetHashCode();
      if (BettingCycleChips != 0) hash ^= BettingCycleChips.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= handsCards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Seat != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seat);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Avatar);
      }
      if (UserChips != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UserChips);
      }
      if (TotalBettingChips != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalBettingChips);
      }
      if (BettingCycleChips != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BettingCycleChips);
      }
      if (Gender != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Gender);
      }
      if (State != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(State);
      }
      handsCards_.WriteTo(output, _repeated_handsCards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (UserChips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserChips);
      }
      if (TotalBettingChips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBettingChips);
      }
      if (BettingCycleChips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BettingCycleChips);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += handsCards_.CalculateSize(_repeated_handsCards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.UserChips != 0) {
        UserChips = other.UserChips;
      }
      if (other.TotalBettingChips != 0) {
        TotalBettingChips = other.TotalBettingChips;
      }
      if (other.BettingCycleChips != 0) {
        BettingCycleChips = other.BettingCycleChips;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.State != 0) {
        State = other.State;
      }
      handsCards_.Add(other.handsCards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Seat = input.ReadInt32();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            Avatar = input.ReadString();
            break;
          }
          case 40: {
            UserChips = input.ReadInt32();
            break;
          }
          case 48: {
            TotalBettingChips = input.ReadInt32();
            break;
          }
          case 56: {
            BettingCycleChips = input.ReadInt32();
            break;
          }
          case 64: {
            gender_ = (global::Msg.Gender) input.ReadEnum();
            break;
          }
          case 72: {
            State = input.ReadInt32();
            break;
          }
          case 82: {
            handsCards_.AddEntriesFrom(input, _repeated_handsCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCard : pb::IMessage<SCard> {
    private static readonly pb::MessageParser<SCard> _parser = new pb::MessageParser<SCard>(() => new SCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCard(SCard other) : this() {
      number_ = other.number_;
      flower_ = other.flower_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCard Clone() {
      return new SCard(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    /// <summary>
    /// 2-14代表 1-A
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "flower" field.</summary>
    public const int FlowerFieldNumber = 2;
    private int flower_;
    /// <summary>
    /// 0-方片 1-梅花 2-红桃 3-黑桃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flower {
      get { return flower_; }
      set {
        flower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Flower != other.Flower) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Flower != 0) hash ^= Flower.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Flower != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Flower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Flower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCard other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Flower != 0) {
        Flower = other.Flower;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 16: {
            Flower = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 离开房间 code:11 返回给房间里的人
  /// </summary>
  public sealed partial class SLeftRoom : pb::IMessage<SLeftRoom> {
    private static readonly pb::MessageParser<SLeftRoom> _parser = new pb::MessageParser<SLeftRoom>(() => new SLeftRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SLeftRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLeftRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLeftRoom(SLeftRoom other) : this() {
      isFail_ = other.isFail_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLeftRoom Clone() {
      return new SLeftRoom(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 离开的用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SLeftRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SLeftRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SLeftRoom other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 12:SChipIn 下注
  /// </summary>
  public sealed partial class SChipIn : pb::IMessage<SChipIn> {
    private static readonly pb::MessageParser<SChipIn> _parser = new pb::MessageParser<SChipIn>(() => new SChipIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SChipIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SChipIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SChipIn(SChipIn other) : this() {
      isFail_ = other.isFail_;
      chips_ = other.chips_;
      userId_ = other.userId_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SChipIn Clone() {
      return new SChipIn(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private int chips_;
    /// <summary>
    /// 下的注额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private int userId_;
    /// <summary>
    /// 下注的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Msg.SChipIn.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SChipIn.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SChipIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SChipIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Chips != other.Chips) return false;
      if (UserId != other.UserId) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Chips != 0) hash ^= Chips.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Chips != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chips);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Chips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chips);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SChipIn other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Chips != 0) {
        Chips = other.Chips;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt32();
            break;
          }
          case 24: {
            UserId = input.ReadInt32();
            break;
          }
          case 32: {
            type_ = (global::Msg.SChipIn.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SChipIn message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// 下注
        /// </summary>
        [pbr::OriginalName("BET")] Bet = 0,
        /// <summary>
        /// 加注
        /// </summary>
        [pbr::OriginalName("RAISE")] Raise = 1,
        /// <summary>
        /// 跟注
        /// </summary>
        [pbr::OriginalName("CALL")] Call = 2,
        /// <summary>
        /// 让牌
        /// </summary>
        [pbr::OriginalName("CHECK")] Check = 3,
        /// <summary>
        /// ALLIN
        /// </summary>
        [pbr::OriginalName("ALLIN")] Allin = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// 17:SGiveUp 弃牌
  /// </summary>
  public sealed partial class SGiveUp : pb::IMessage<SGiveUp> {
    private static readonly pb::MessageParser<SGiveUp> _parser = new pb::MessageParser<SGiveUp>(() => new SGiveUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SGiveUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGiveUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGiveUp(SGiveUp other) : this() {
      isFail_ = other.isFail_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGiveUp Clone() {
      return new SGiveUp(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    /// 下注的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SGiveUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SGiveUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SGiveUp other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 18:SRepurchase 重购
  /// </summary>
  public sealed partial class SRepurchase : pb::IMessage<SRepurchase> {
    private static readonly pb::MessageParser<SRepurchase> _parser = new pb::MessageParser<SRepurchase>(() => new SRepurchase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRepurchase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRepurchase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRepurchase(SRepurchase other) : this() {
      isFail_ = other.isFail_;
      id_ = other.id_;
      seat_ = other.seat_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRepurchase Clone() {
      return new SRepurchase(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 重购的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 3;
    private int seat_;
    /// <summary>
    /// 所在位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    /// <summary>
    /// 重购的记分牌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRepurchase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRepurchase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Id != other.Id) return false;
      if (Seat != other.Seat) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Seat != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Seat);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRepurchase other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Seat = input.ReadInt32();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知什么时候升盲（升盲级别）code:50
  /// </summary>
  public sealed partial class SNoticeBlind : pb::IMessage<SNoticeBlind> {
    private static readonly pb::MessageParser<SNoticeBlind> _parser = new pb::MessageParser<SNoticeBlind>(() => new SNoticeBlind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SNoticeBlind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SNoticeBlind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SNoticeBlind(SNoticeBlind other) : this() {
      raiseTime_ = other.raiseTime_;
      raiseLevel_ = other.raiseLevel_;
      blind_ = other.blind_;
      preRecordPoker_ = other.preRecordPoker_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SNoticeBlind Clone() {
      return new SNoticeBlind(this);
    }

    /// <summary>Field number for the "raise_time" field.</summary>
    public const int RaiseTimeFieldNumber = 1;
    private int raiseTime_;
    /// <summary>
    /// 升盲时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaiseTime {
      get { return raiseTime_; }
      set {
        raiseTime_ = value;
      }
    }

    /// <summary>Field number for the "raise_level" field.</summary>
    public const int RaiseLevelFieldNumber = 2;
    private int raiseLevel_;
    /// <summary>
    /// 升盲级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaiseLevel {
      get { return raiseLevel_; }
      set {
        raiseLevel_ = value;
      }
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 3;
    private int blind_;
    /// <summary>
    /// 盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Blind {
      get { return blind_; }
      set {
        blind_ = value;
      }
    }

    /// <summary>Field number for the "pre_record_poker" field.</summary>
    public const int PreRecordPokerFieldNumber = 4;
    private int preRecordPoker_;
    /// <summary>
    /// 前注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreRecordPoker {
      get { return preRecordPoker_; }
      set {
        preRecordPoker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SNoticeBlind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SNoticeBlind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RaiseTime != other.RaiseTime) return false;
      if (RaiseLevel != other.RaiseLevel) return false;
      if (Blind != other.Blind) return false;
      if (PreRecordPoker != other.PreRecordPoker) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RaiseTime != 0) hash ^= RaiseTime.GetHashCode();
      if (RaiseLevel != 0) hash ^= RaiseLevel.GetHashCode();
      if (Blind != 0) hash ^= Blind.GetHashCode();
      if (PreRecordPoker != 0) hash ^= PreRecordPoker.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RaiseTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RaiseTime);
      }
      if (RaiseLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RaiseLevel);
      }
      if (Blind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Blind);
      }
      if (PreRecordPoker != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PreRecordPoker);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RaiseTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaiseTime);
      }
      if (RaiseLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaiseLevel);
      }
      if (Blind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blind);
      }
      if (PreRecordPoker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreRecordPoker);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SNoticeBlind other) {
      if (other == null) {
        return;
      }
      if (other.RaiseTime != 0) {
        RaiseTime = other.RaiseTime;
      }
      if (other.RaiseLevel != 0) {
        RaiseLevel = other.RaiseLevel;
      }
      if (other.Blind != 0) {
        Blind = other.Blind;
      }
      if (other.PreRecordPoker != 0) {
        PreRecordPoker = other.PreRecordPoker;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RaiseTime = input.ReadInt32();
            break;
          }
          case 16: {
            RaiseLevel = input.ReadInt32();
            break;
          }
          case 24: {
            Blind = input.ReadInt32();
            break;
          }
          case 32: {
            PreRecordPoker = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每局开始发牌code:51
  /// </summary>
  public sealed partial class SCards : pb::IMessage<SCards> {
    private static readonly pb::MessageParser<SCards> _parser = new pb::MessageParser<SCards>(() => new SCards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCards(SCards other) : this() {
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCards Clone() {
      return new SCards(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.SCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.SCard.Parser);
    private readonly pbc::RepeatedField<global::Msg.SCard> cards_ = new pbc::RepeatedField<global::Msg.SCard>();
    /// <summary>
    /// 牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SCard> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCards other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 等待加注时间code:52
  /// </summary>
  public sealed partial class SWaitAddTime : pb::IMessage<SWaitAddTime> {
    private static readonly pb::MessageParser<SWaitAddTime> _parser = new pb::MessageParser<SWaitAddTime>(() => new SWaitAddTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SWaitAddTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SWaitAddTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SWaitAddTime(SWaitAddTime other) : this() {
      waitTime_ = other.waitTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SWaitAddTime Clone() {
      return new SWaitAddTime(this);
    }

    /// <summary>Field number for the "wait_time" field.</summary>
    public const int WaitTimeFieldNumber = 1;
    private int waitTime_;
    /// <summary>
    /// 等待加注时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SWaitAddTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SWaitAddTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitTime != other.WaitTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaitTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SWaitAddTime other) {
      if (other == null) {
        return;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WaitTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 告诉每个人的牌型，比分code:53
  /// </summary>
  public sealed partial class SResult : pb::IMessage<SResult> {
    private static readonly pb::MessageParser<SResult> _parser = new pb::MessageParser<SResult>(() => new SResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SResult(SResult other) : this() {
      userResults_ = other.userResults_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SResult Clone() {
      return new SResult(this);
    }

    /// <summary>Field number for the "user_results" field.</summary>
    public const int UserResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.SUserResult> _repeated_userResults_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.SUserResult.Parser);
    private readonly pbc::RepeatedField<global::Msg.SUserResult> userResults_ = new pbc::RepeatedField<global::Msg.SUserResult>();
    /// <summary>
    /// 用户结果列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SUserResult> UserResults {
      get { return userResults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userResults_.Equals(other.userResults_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userResults_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userResults_.WriteTo(output, _repeated_userResults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userResults_.CalculateSize(_repeated_userResults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SResult other) {
      if (other == null) {
        return;
      }
      userResults_.Add(other.userResults_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userResults_.AddEntriesFrom(input, _repeated_userResults_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 54:SUserResult 用户最大的牌
  /// </summary>
  public sealed partial class SUserResult : pb::IMessage<SUserResult> {
    private static readonly pb::MessageParser<SUserResult> _parser = new pb::MessageParser<SUserResult>(() => new SUserResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserResult(SUserResult other) : this() {
      id_ = other.id_;
      cards_ = other.cards_.Clone();
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserResult Clone() {
      return new SUserResult(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SCard.Parser);
    private readonly pbc::RepeatedField<global::Msg.SCard> cards_ = new pbc::RepeatedField<global::Msg.SCard>();
    /// <summary>
    /// 用户最大的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SCard> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserResult other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      cards_.Add(other.cards_);
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每局结算发成绩code:58
  /// </summary>
  public sealed partial class STableScore : pb::IMessage<STableScore> {
    private static readonly pb::MessageParser<STableScore> _parser = new pb::MessageParser<STableScore>(() => new STableScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STableScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STableScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STableScore(STableScore other) : this() {
      userScoreItems_ = other.userScoreItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STableScore Clone() {
      return new STableScore(this);
    }

    /// <summary>Field number for the "user_score_items" field.</summary>
    public const int UserScoreItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.STableScore.Types.UserScoreItem> _repeated_userScoreItems_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.STableScore.Types.UserScoreItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.STableScore.Types.UserScoreItem> userScoreItems_ = new pbc::RepeatedField<global::Msg.STableScore.Types.UserScoreItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.STableScore.Types.UserScoreItem> UserScoreItems {
      get { return userScoreItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STableScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STableScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userScoreItems_.Equals(other.userScoreItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userScoreItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userScoreItems_.WriteTo(output, _repeated_userScoreItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userScoreItems_.CalculateSize(_repeated_userScoreItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STableScore other) {
      if (other == null) {
        return;
      }
      userScoreItems_.Add(other.userScoreItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userScoreItems_.AddEntriesFrom(input, _repeated_userScoreItems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the STableScore message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UserScoreItem : pb::IMessage<UserScoreItem> {
        private static readonly pb::MessageParser<UserScoreItem> _parser = new pb::MessageParser<UserScoreItem>(() => new UserScoreItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserScoreItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.STableScore.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserScoreItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserScoreItem(UserScoreItem other) : this() {
          id_ = other.id_;
          seat_ = other.seat_;
          score_ = other.score_;
          cardType_ = other.cardType_;
          cards_ = other.cards_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserScoreItem Clone() {
          return new UserScoreItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        /// <summary>
        /// ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "seat" field.</summary>
        public const int SeatFieldNumber = 2;
        private int seat_;
        /// <summary>
        /// 位置
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Seat {
          get { return seat_; }
          set {
            seat_ = value;
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 3;
        private int score_;
        /// <summary>
        /// 成绩
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "cardType" field.</summary>
        public const int CardTypeFieldNumber = 4;
        private string cardType_ = "";
        /// <summary>
        /// 牌型
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CardType {
          get { return cardType_; }
          set {
            cardType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cards" field.</summary>
        public const int CardsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Msg.SCard> _repeated_cards_codec
            = pb::FieldCodec.ForMessage(42, global::Msg.SCard.Parser);
        private readonly pbc::RepeatedField<global::Msg.SCard> cards_ = new pbc::RepeatedField<global::Msg.SCard>();
        /// <summary>
        /// 用户最大的牌
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Msg.SCard> Cards {
          get { return cards_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserScoreItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserScoreItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Seat != other.Seat) return false;
          if (Score != other.Score) return false;
          if (CardType != other.CardType) return false;
          if(!cards_.Equals(other.cards_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Seat != 0) hash ^= Seat.GetHashCode();
          if (Score != 0) hash ^= Score.GetHashCode();
          if (CardType.Length != 0) hash ^= CardType.GetHashCode();
          hash ^= cards_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Seat != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Seat);
          }
          if (Score != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Score);
          }
          if (CardType.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(CardType);
          }
          cards_.WriteTo(output, _repeated_cards_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Seat != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
          }
          if (Score != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
          }
          if (CardType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CardType);
          }
          size += cards_.CalculateSize(_repeated_cards_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserScoreItem other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Seat != 0) {
            Seat = other.Seat;
          }
          if (other.Score != 0) {
            Score = other.Score;
          }
          if (other.CardType.Length != 0) {
            CardType = other.CardType;
          }
          cards_.Add(other.cards_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 16: {
                Seat = input.ReadInt32();
                break;
              }
              case 24: {
                Score = input.ReadInt32();
                break;
              }
              case 34: {
                CardType = input.ReadString();
                break;
              }
              case 42: {
                cards_.AddEntriesFrom(input, _repeated_cards_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 返回排名code:60
  /// </summary>
  public sealed partial class SOrderItem : pb::IMessage<SOrderItem> {
    private static readonly pb::MessageParser<SOrderItem> _parser = new pb::MessageParser<SOrderItem>(() => new SOrderItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SOrderItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SOrderItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SOrderItem(SOrderItem other) : this() {
      id_ = other.id_;
      seat_ = other.seat_;
      order_ = other.order_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SOrderItem Clone() {
      return new SOrderItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 2;
    private int seat_;
    /// <summary>
    /// 座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 3;
    private int order_;
    /// <summary>
    /// 名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SOrderItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SOrderItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Seat != other.Seat) return false;
      if (Order != other.Order) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Seat != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seat);
      }
      if (Order != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Order);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SOrderItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Seat = input.ReadInt32();
            break;
          }
          case 24: {
            Order = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知被拆的桌子里剩下的玩家，哪些位置得人被分出去code:62
  /// </summary>
  public sealed partial class SSplitLeftSeat : pb::IMessage<SSplitLeftSeat> {
    private static readonly pb::MessageParser<SSplitLeftSeat> _parser = new pb::MessageParser<SSplitLeftSeat>(() => new SSplitLeftSeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SSplitLeftSeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSplitLeftSeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSplitLeftSeat(SSplitLeftSeat other) : this() {
      seats_ = other.seats_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SSplitLeftSeat Clone() {
      return new SSplitLeftSeat(this);
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_seats_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> seats_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 被分出去的人的位置数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Seats {
      get { return seats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SSplitLeftSeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SSplitLeftSeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!seats_.Equals(other.seats_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= seats_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      seats_.WriteTo(output, _repeated_seats_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += seats_.CalculateSize(_repeated_seats_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SSplitLeftSeat other) {
      if (other == null) {
        return;
      }
      seats_.Add(other.seats_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            seats_.AddEntriesFrom(input, _repeated_seats_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ============================
  /// 100:SVerCode 注册返回验证码
  /// </summary>
  public sealed partial class SVerCode : pb::IMessage<SVerCode> {
    private static readonly pb::MessageParser<SVerCode> _parser = new pb::MessageParser<SVerCode>(() => new SVerCode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SVerCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVerCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVerCode(SVerCode other) : this() {
      isFail_ = other.isFail_;
      verCode_ = other.verCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVerCode Clone() {
      return new SVerCode(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "verCode" field.</summary>
    public const int VerCodeFieldNumber = 2;
    private int verCode_;
    /// <summary>
    /// 验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerCode {
      get { return verCode_; }
      set {
        verCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SVerCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SVerCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (VerCode != other.VerCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (VerCode != 0) hash ^= VerCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (VerCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (VerCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SVerCode other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.VerCode != 0) {
        VerCode = other.VerCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            VerCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 103:SModifyAvatar 修改头像
  /// </summary>
  public sealed partial class SModifyAvatar : pb::IMessage<SModifyAvatar> {
    private static readonly pb::MessageParser<SModifyAvatar> _parser = new pb::MessageParser<SModifyAvatar>(() => new SModifyAvatar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SModifyAvatar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SModifyAvatar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SModifyAvatar(SModifyAvatar other) : this() {
      isFail_ = other.isFail_;
      avatarUrl_ = other.avatarUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SModifyAvatar Clone() {
      return new SModifyAvatar(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 2;
    private int avatarUrl_;
    /// <summary>
    /// 头像路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SModifyAvatar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SModifyAvatar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (AvatarUrl != 0) hash ^= AvatarUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (AvatarUrl != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AvatarUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (AvatarUrl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SModifyAvatar other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.AvatarUrl != 0) {
        AvatarUrl = other.AvatarUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            AvatarUrl = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 108:SChat 文字聊天
  /// </summary>
  public sealed partial class SChat : pb::IMessage<SChat> {
    private static readonly pb::MessageParser<SChat> _parser = new pb::MessageParser<SChat>(() => new SChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SChat(SChat other) : this() {
      isFail_ = other.isFail_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SChat Clone() {
      return new SChat(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private int content_;
    /// <summary>
    /// 头像路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Content != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Content != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Content != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SChat other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Content != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Content = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 110:SClub 俱乐部详情
  /// </summary>
  public sealed partial class SClub : pb::IMessage<SClub> {
    private static readonly pb::MessageParser<SClub> _parser = new pb::MessageParser<SClub>(() => new SClub());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SClub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SClub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SClub(SClub other) : this() {
      isFail_ = other.isFail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SClub Clone() {
      return new SClub(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SClub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SClub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SClub other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 111:SClubList 俱乐部列表
  /// </summary>
  public sealed partial class SClubList : pb::IMessage<SClubList> {
    private static readonly pb::MessageParser<SClubList> _parser = new pb::MessageParser<SClubList>(() => new SClubList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SClubList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SClubList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SClubList(SClubList other) : this() {
      isFail_ = other.isFail_;
      clubs_ = other.clubs_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SClubList Clone() {
      return new SClubList(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "clubs" field.</summary>
    public const int ClubsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SClub> _repeated_clubs_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SClub.Parser);
    private readonly pbc::RepeatedField<global::Msg.SClub> clubs_ = new pbc::RepeatedField<global::Msg.SClub>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SClub> Clubs {
      get { return clubs_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 3;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SClubList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SClubList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if(!clubs_.Equals(other.clubs_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      hash ^= clubs_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      clubs_.WriteTo(output, _repeated_clubs_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      size += clubs_.CalculateSize(_repeated_clubs_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SClubList other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      clubs_.Add(other.clubs_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            clubs_.AddEntriesFrom(input, _repeated_clubs_codec);
            break;
          }
          case 26: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 112:SShoppingMallList 商城列表
  /// </summary>
  public sealed partial class SShoppingMallList : pb::IMessage<SShoppingMallList> {
    private static readonly pb::MessageParser<SShoppingMallList> _parser = new pb::MessageParser<SShoppingMallList>(() => new SShoppingMallList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SShoppingMallList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SShoppingMallList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SShoppingMallList(SShoppingMallList other) : this() {
      isFail_ = other.isFail_;
      shoppingMallItems_ = other.shoppingMallItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SShoppingMallList Clone() {
      return new SShoppingMallList(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "shopping_mall_items" field.</summary>
    public const int ShoppingMallItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SShoppingMallList.Types.SShoppingMallItem> _repeated_shoppingMallItems_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SShoppingMallList.Types.SShoppingMallItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SShoppingMallList.Types.SShoppingMallItem> shoppingMallItems_ = new pbc::RepeatedField<global::Msg.SShoppingMallList.Types.SShoppingMallItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SShoppingMallList.Types.SShoppingMallItem> ShoppingMallItems {
      get { return shoppingMallItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 3;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SShoppingMallList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SShoppingMallList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if(!shoppingMallItems_.Equals(other.shoppingMallItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      hash ^= shoppingMallItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      shoppingMallItems_.WriteTo(output, _repeated_shoppingMallItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      size += shoppingMallItems_.CalculateSize(_repeated_shoppingMallItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SShoppingMallList other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      shoppingMallItems_.Add(other.shoppingMallItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            shoppingMallItems_.AddEntriesFrom(input, _repeated_shoppingMallItems_codec);
            break;
          }
          case 26: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SShoppingMallList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SShoppingMallItem : pb::IMessage<SShoppingMallItem> {
        private static readonly pb::MessageParser<SShoppingMallItem> _parser = new pb::MessageParser<SShoppingMallItem>(() => new SShoppingMallItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SShoppingMallItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SShoppingMallList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SShoppingMallItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SShoppingMallItem(SShoppingMallItem other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SShoppingMallItem Clone() {
          return new SShoppingMallItem(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SShoppingMallItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SShoppingMallItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SShoppingMallItem other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 113:SKnapsackList 背包列表(已领取)
  /// </summary>
  public sealed partial class SKnapsackList : pb::IMessage<SKnapsackList> {
    private static readonly pb::MessageParser<SKnapsackList> _parser = new pb::MessageParser<SKnapsackList>(() => new SKnapsackList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SKnapsackList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SKnapsackList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SKnapsackList(SKnapsackList other) : this() {
      isFail_ = other.isFail_;
      knapsackItems_ = other.knapsackItems_.Clone();
      PageInfo = other.pageInfo_ != null ? other.PageInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SKnapsackList Clone() {
      return new SKnapsackList(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "knapsack_items" field.</summary>
    public const int KnapsackItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SKnapsackList.Types.SKnapsackItem> _repeated_knapsackItems_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SKnapsackList.Types.SKnapsackItem.Parser);
    private readonly pbc::RepeatedField<global::Msg.SKnapsackList.Types.SKnapsackItem> knapsackItems_ = new pbc::RepeatedField<global::Msg.SKnapsackList.Types.SKnapsackItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SKnapsackList.Types.SKnapsackItem> KnapsackItems {
      get { return knapsackItems_; }
    }

    /// <summary>Field number for the "page_info" field.</summary>
    public const int PageInfoFieldNumber = 3;
    private global::Msg.SPageInfo pageInfo_;
    /// <summary>
    /// 分页信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SPageInfo PageInfo {
      get { return pageInfo_; }
      set {
        pageInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SKnapsackList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SKnapsackList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if(!knapsackItems_.Equals(other.knapsackItems_)) return false;
      if (!object.Equals(PageInfo, other.PageInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      hash ^= knapsackItems_.GetHashCode();
      if (pageInfo_ != null) hash ^= PageInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      knapsackItems_.WriteTo(output, _repeated_knapsackItems_codec);
      if (pageInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      size += knapsackItems_.CalculateSize(_repeated_knapsackItems_codec);
      if (pageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SKnapsackList other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      knapsackItems_.Add(other.knapsackItems_);
      if (other.pageInfo_ != null) {
        if (pageInfo_ == null) {
          pageInfo_ = new global::Msg.SPageInfo();
        }
        PageInfo.MergeFrom(other.PageInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            knapsackItems_.AddEntriesFrom(input, _repeated_knapsackItems_codec);
            break;
          }
          case 26: {
            if (pageInfo_ == null) {
              pageInfo_ = new global::Msg.SPageInfo();
            }
            input.ReadMessage(pageInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SKnapsackList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SKnapsackItem : pb::IMessage<SKnapsackItem> {
        private static readonly pb::MessageParser<SKnapsackItem> _parser = new pb::MessageParser<SKnapsackItem>(() => new SKnapsackItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SKnapsackItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Msg.SKnapsackList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SKnapsackItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SKnapsackItem(SKnapsackItem other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SKnapsackItem Clone() {
          return new SKnapsackItem(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SKnapsackItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SKnapsackItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SKnapsackItem other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 116:SAboutUs 关于我们
  /// </summary>
  public sealed partial class SAboutUs : pb::IMessage<SAboutUs> {
    private static readonly pb::MessageParser<SAboutUs> _parser = new pb::MessageParser<SAboutUs>(() => new SAboutUs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SAboutUs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAboutUs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAboutUs(SAboutUs other) : this() {
      isFail_ = other.isFail_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SAboutUs Clone() {
      return new SAboutUs(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SAboutUs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SAboutUs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SAboutUs other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 117:SVsersion 版本号
  /// </summary>
  public sealed partial class SVsersion : pb::IMessage<SVsersion> {
    private static readonly pb::MessageParser<SVsersion> _parser = new pb::MessageParser<SVsersion>(() => new SVsersion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SVsersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVsersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVsersion(SVsersion other) : this() {
      isFail_ = other.isFail_;
      anVersionCode_ = other.anVersionCode_;
      anVersionDes_ = other.anVersionDes_;
      anDownloadUrl_ = other.anDownloadUrl_;
      iosVersionCode_ = other.iosVersionCode_;
      iosVersionDes_ = other.iosVersionDes_;
      iosDownloadUrl_ = other.iosDownloadUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVsersion Clone() {
      return new SVsersion(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "anVersionCode" field.</summary>
    public const int AnVersionCodeFieldNumber = 2;
    private string anVersionCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnVersionCode {
      get { return anVersionCode_; }
      set {
        anVersionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anVersionDes" field.</summary>
    public const int AnVersionDesFieldNumber = 3;
    private string anVersionDes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnVersionDes {
      get { return anVersionDes_; }
      set {
        anVersionDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anDownloadUrl" field.</summary>
    public const int AnDownloadUrlFieldNumber = 4;
    private string anDownloadUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnDownloadUrl {
      get { return anDownloadUrl_; }
      set {
        anDownloadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iosVersionCode" field.</summary>
    public const int IosVersionCodeFieldNumber = 5;
    private string iosVersionCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IosVersionCode {
      get { return iosVersionCode_; }
      set {
        iosVersionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iosVersionDes" field.</summary>
    public const int IosVersionDesFieldNumber = 6;
    private string iosVersionDes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IosVersionDes {
      get { return iosVersionDes_; }
      set {
        iosVersionDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iosDownloadUrl" field.</summary>
    public const int IosDownloadUrlFieldNumber = 7;
    private string iosDownloadUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IosDownloadUrl {
      get { return iosDownloadUrl_; }
      set {
        iosDownloadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SVsersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SVsersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (AnVersionCode != other.AnVersionCode) return false;
      if (AnVersionDes != other.AnVersionDes) return false;
      if (AnDownloadUrl != other.AnDownloadUrl) return false;
      if (IosVersionCode != other.IosVersionCode) return false;
      if (IosVersionDes != other.IosVersionDes) return false;
      if (IosDownloadUrl != other.IosDownloadUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (AnVersionCode.Length != 0) hash ^= AnVersionCode.GetHashCode();
      if (AnVersionDes.Length != 0) hash ^= AnVersionDes.GetHashCode();
      if (AnDownloadUrl.Length != 0) hash ^= AnDownloadUrl.GetHashCode();
      if (IosVersionCode.Length != 0) hash ^= IosVersionCode.GetHashCode();
      if (IosVersionDes.Length != 0) hash ^= IosVersionDes.GetHashCode();
      if (IosDownloadUrl.Length != 0) hash ^= IosDownloadUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (AnVersionCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnVersionCode);
      }
      if (AnVersionDes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnVersionDes);
      }
      if (AnDownloadUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AnDownloadUrl);
      }
      if (IosVersionCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IosVersionCode);
      }
      if (IosVersionDes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IosVersionDes);
      }
      if (IosDownloadUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(IosDownloadUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (AnVersionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnVersionCode);
      }
      if (AnVersionDes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnVersionDes);
      }
      if (AnDownloadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnDownloadUrl);
      }
      if (IosVersionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IosVersionCode);
      }
      if (IosVersionDes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IosVersionDes);
      }
      if (IosDownloadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IosDownloadUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SVsersion other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.AnVersionCode.Length != 0) {
        AnVersionCode = other.AnVersionCode;
      }
      if (other.AnVersionDes.Length != 0) {
        AnVersionDes = other.AnVersionDes;
      }
      if (other.AnDownloadUrl.Length != 0) {
        AnDownloadUrl = other.AnDownloadUrl;
      }
      if (other.IosVersionCode.Length != 0) {
        IosVersionCode = other.IosVersionCode;
      }
      if (other.IosVersionDes.Length != 0) {
        IosVersionDes = other.IosVersionDes;
      }
      if (other.IosDownloadUrl.Length != 0) {
        IosDownloadUrl = other.IosDownloadUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 18: {
            AnVersionCode = input.ReadString();
            break;
          }
          case 26: {
            AnVersionDes = input.ReadString();
            break;
          }
          case 34: {
            AnDownloadUrl = input.ReadString();
            break;
          }
          case 42: {
            IosVersionCode = input.ReadString();
            break;
          }
          case 50: {
            IosVersionDes = input.ReadString();
            break;
          }
          case 58: {
            IosDownloadUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 118:SFeedback 版意见反馈
  /// </summary>
  public sealed partial class SFeedback : pb::IMessage<SFeedback> {
    private static readonly pb::MessageParser<SFeedback> _parser = new pb::MessageParser<SFeedback>(() => new SFeedback());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SFeedback> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SFeedback(SFeedback other) : this() {
      isFail_ = other.isFail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SFeedback Clone() {
      return new SFeedback(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SFeedback);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SFeedback other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 101 加入房间，返回牌桌信息
  /// 50:STable 拆桌或者合并桌子时，加入其它的牌桌
  /// </summary>
  public sealed partial class STable : pb::IMessage<STable> {
    private static readonly pb::MessageParser<STable> _parser = new pb::MessageParser<STable>(() => new STable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STable(STable other) : this() {
      state_ = other.state_;
      seatNo_ = other.seatNo_;
      capacity_ = other.capacity_;
      blindUpRemain_ = other.blindUpRemain_;
      buttonSeat_ = other.buttonSeat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STable Clone() {
      return new STable(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Msg.STable.Types.TableState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.STable.Types.TableState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "seat_no" field.</summary>
    public const int SeatNoFieldNumber = 2;
    private int seatNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatNo {
      get { return seatNo_; }
      set {
        seatNo_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 3;
    private int capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "blind_up_remain" field.</summary>
    public const int BlindUpRemainFieldNumber = 4;
    private int blindUpRemain_;
    /// <summary>
    /// 升盲剩余时间（秒），GAMING状态的时候才会返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlindUpRemain {
      get { return blindUpRemain_; }
      set {
        blindUpRemain_ = value;
      }
    }

    /// <summary>Field number for the "button_seat" field.</summary>
    public const int ButtonSeatFieldNumber = 5;
    private int buttonSeat_;
    /// <summary>
    /// button的位置，GAMING状态的时候才会返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ButtonSeat {
      get { return buttonSeat_; }
      set {
        buttonSeat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (SeatNo != other.SeatNo) return false;
      if (Capacity != other.Capacity) return false;
      if (BlindUpRemain != other.BlindUpRemain) return false;
      if (ButtonSeat != other.ButtonSeat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (SeatNo != 0) hash ^= SeatNo.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (BlindUpRemain != 0) hash ^= BlindUpRemain.GetHashCode();
      if (ButtonSeat != 0) hash ^= ButtonSeat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (SeatNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatNo);
      }
      if (Capacity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Capacity);
      }
      if (BlindUpRemain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BlindUpRemain);
      }
      if (ButtonSeat != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ButtonSeat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (SeatNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNo);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (BlindUpRemain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlindUpRemain);
      }
      if (ButtonSeat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ButtonSeat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STable other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.SeatNo != 0) {
        SeatNo = other.SeatNo;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.BlindUpRemain != 0) {
        BlindUpRemain = other.BlindUpRemain;
      }
      if (other.ButtonSeat != 0) {
        ButtonSeat = other.ButtonSeat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Msg.STable.Types.TableState) input.ReadEnum();
            break;
          }
          case 16: {
            SeatNo = input.ReadInt32();
            break;
          }
          case 24: {
            Capacity = input.ReadInt32();
            break;
          }
          case 32: {
            BlindUpRemain = input.ReadInt32();
            break;
          }
          case 40: {
            ButtonSeat = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the STable message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TableState {
        [pbr::OriginalName("GAMING")] Gaming = 0,
        [pbr::OriginalName("WAITING")] Waiting = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// 51 有人加入牌局
  /// message SJoinTable {
  ///     int32 seat = 1; //新加入的玩家所在seat编号
  ///     SPlayer player = 2;
  /// }
  /// message SPlayer {
  ///     int32 id = 1;
  ///     string name = 2;
  ///     Gender gender = 3;
  ///     string head_image = 4;
  ///     int32 chips = 5;
  /// }
  /// 52 开始牌局
  /// message SNewRound {
  ///     int32 level = 1;
  ///     bool repurchase = 2; //是否可以重购
  ///     int32 small_blind = 3; //小盲注
  ///     int32 big_blind = 4; //大盲注
  ///     int32 antes = 5; //底注
  ///     repeated int32 player_seat = 6; //玩家座位编号
  ///     int32 button_seat = 7; //button的位置
  /// }
  /// //53 用户状态改变，掉线托管，断线重连状态
  /// message SPlayerStatus{
  ///     Status status = 1;
  ///     enum Status{
  ///         ON_LINE= 0;
  ///         OFF_LINE = 1;
  ///     }
  /// }
  /// //54 用户输光，退出牌桌
  /// message SQuitGame{
  ///     int32 seat = 1;
  /// }
  /// //55 当前Round的比赛结果, 从主池到边池的所有的获胜者
  /// message SRoundResult{
  ///     repeated SRoundWinner winners = 1;
  /// }
  /// </summary>
  public sealed partial class SRoundWinner : pb::IMessage<SRoundWinner> {
    private static readonly pb::MessageParser<SRoundWinner> _parser = new pb::MessageParser<SRoundWinner>(() => new SRoundWinner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SRoundWinner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoundWinner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoundWinner(SRoundWinner other) : this() {
      seat_ = other.seat_;
      chips_ = other.chips_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SRoundWinner Clone() {
      return new SRoundWinner(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 1;
    private int seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private int chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SRoundWinner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SRoundWinner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seat != other.Seat) return false;
      if (Chips != other.Chips) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (Chips != 0) hash ^= Chips.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seat != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seat);
      }
      if (Chips != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (Chips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SRoundWinner other) {
      if (other == null) {
        return;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.Chips != 0) {
        Chips = other.Chips;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seat = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ////////////////////////////////////////////////先忽略下面
  /// </summary>
  public sealed partial class STip : pb::IMessage<STip> {
    private static readonly pb::MessageParser<STip> _parser = new pb::MessageParser<STip>(() => new STip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STip(STip other) : this() {
      code_ = other.code_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STip Clone() {
      return new STip(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STip other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SUser : pb::IMessage<SUser> {
    private static readonly pb::MessageParser<SUser> _parser = new pb::MessageParser<SUser>(() => new SUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUser(SUser other) : this() {
      isFail_ = other.isFail_;
      id_ = other.id_;
      avatarUrl_ = other.avatarUrl_;
      phone_ = other.phone_;
      nickname_ = other.nickname_;
      gender_ = other.gender_;
      level_ = other.level_;
      money_ = other.money_;
      gameId_ = other.gameId_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUser Clone() {
      return new SUser(this);
    }

    /// <summary>Field number for the "is_fail" field.</summary>
    public const int IsFailFieldNumber = 1;
    private int isFail_;
    /// <summary>
    /// 0-请求成功 非零请求失败，失败原因根据数值而定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFail {
      get { return isFail_; }
      set {
        isFail_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 3;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 4;
    private string phone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 5;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private global::Msg.Gender gender_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 8;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 9;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 10;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFail != other.IsFail) return false;
      if (Id != other.Id) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Phone != other.Phone) return false;
      if (Nickname != other.Nickname) return false;
      if (Gender != other.Gender) return false;
      if (Level != other.Level) return false;
      if (Money != other.Money) return false;
      if (GameId != other.GameId) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFail != 0) hash ^= IsFail.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Money != 0) hash ^= Money.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFail != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsFail);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AvatarUrl);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Phone);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Nickname);
      }
      if (Gender != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Gender);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Money != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Money);
      }
      if (GameId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFail);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUser other) {
      if (other == null) {
        return;
      }
      if (other.IsFail != 0) {
        IsFail = other.IsFail;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Money != 0) {
        Money = other.Money;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFail = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 34: {
            Phone = input.ReadString();
            break;
          }
          case 42: {
            Nickname = input.ReadString();
            break;
          }
          case 48: {
            gender_ = (global::Msg.Gender) input.ReadEnum();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            Money = input.ReadInt32();
            break;
          }
          case 72: {
            GameId = input.ReadInt32();
            break;
          }
          case 82: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SUserAction : pb::IMessage<SUserAction> {
    private static readonly pb::MessageParser<SUserAction> _parser = new pb::MessageParser<SUserAction>(() => new SUserAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserAction(SUserAction other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserAction Clone() {
      return new SUserAction(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserAction other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SGameStart : pb::IMessage<SGameStart> {
    private static readonly pb::MessageParser<SGameStart> _parser = new pb::MessageParser<SGameStart>(() => new SGameStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.ServerReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGameStart(SGameStart other) : this() {
      smallBlindsSeat_ = other.smallBlindsSeat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGameStart Clone() {
      return new SGameStart(this);
    }

    /// <summary>Field number for the "small_blinds_seat" field.</summary>
    public const int SmallBlindsSeatFieldNumber = 1;
    private int smallBlindsSeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallBlindsSeat {
      get { return smallBlindsSeat_; }
      set {
        smallBlindsSeat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SmallBlindsSeat != other.SmallBlindsSeat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SmallBlindsSeat != 0) hash ^= SmallBlindsSeat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SmallBlindsSeat != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SmallBlindsSeat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SmallBlindsSeat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallBlindsSeat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SGameStart other) {
      if (other == null) {
        return;
      }
      if (other.SmallBlindsSeat != 0) {
        SmallBlindsSeat = other.SmallBlindsSeat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SmallBlindsSeat = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
